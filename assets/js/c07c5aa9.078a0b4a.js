"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[1996],{422:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return c},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=n(7462),l=n(3366),i=(n(7294),n(3905)),a=n(5714),o=["components"],s={title:"658. Find K Closest Elements (Medium)",tags:["Array","Two Pointers","Binary Search","Sorting","Heap","Priority Queue","Medium"]},u=void 0,p={unversionedId:"658",id:"658",title:"658. Find K Closest Elements (Medium)",description:"<SolutionDocHead",source:"@site/solutions/658.mdx",sourceDirName:".",slug:"/658",permalink:"/leetcode/solutions/658",tags:[{label:"Array",permalink:"/leetcode/solutions/tags/array"},{label:"Two Pointers",permalink:"/leetcode/solutions/tags/two-pointers"},{label:"Binary Search",permalink:"/leetcode/solutions/tags/binary-search"},{label:"Sorting",permalink:"/leetcode/solutions/tags/sorting"},{label:"Heap",permalink:"/leetcode/solutions/tags/heap"},{label:"Priority Queue",permalink:"/leetcode/solutions/tags/priority-queue"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651083960,formattedLastUpdatedAt:"4/27/2022",frontMatter:{title:"658. Find K Closest Elements (Medium)",tags:["Array","Two Pointers","Binary Search","Sorting","Heap","Priority Queue","Medium"]},sidebar:"solutions",previous:{title:"560. Subarray Sum Equals K (Medium)",permalink:"/leetcode/solutions/560"},next:{title:"702. Search in a Sorted Array of Unknown Size (Medium)",permalink:"/leetcode/solutions/702"}},d={},m=[],k={toc:m};function c(e){var t=e.components,n=(0,l.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(a.Z,{solutionType:"medium",labels:["Array","Two Pointers","Binary Search","Sorting","Heap","Priority Queue"],companies:["Google"],url:"https://leetcode.com/problems/find-k-closest-elements/",mdxType:"SolutionDocHead"}),(0,i.kt)("p",null,"Given a ",(0,i.kt)("b",null,"sorted")," integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"arr"),", two integers ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", return the ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," closest integers to ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," in the array. The result should also be sorted in ascending order."),(0,i.kt)("p",null,"An integer ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," is closer to x than an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," if:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"|a - x| < |b - x|"),", or"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"|a - x| == |b - x|")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"a < b"))),(0,i.kt)("b",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: arr = [1,2,3,4,5], k = 4, x = 3\nOutput: [1,2,3,4]\n")),(0,i.kt)("b",null,"Example 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: arr = [1,2,3,4,5], k = 4, x = -1\nOutput: [1,2,3,4]\n")),(0,i.kt)("b",null,"Constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= k <= arr.length")),(0,i.kt)("li",{parentName:"ul"},"1 <= arr.length <= 10",(0,i.kt)("sup",null,"4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arr")," is sorted in ",(0,i.kt)("b",null,"ascending")," order."),(0,i.kt)("li",{parentName:"ul"},"-10",(0,i.kt)("sup",null,"4")," <= arr","[i]",", x <= 10",(0,i.kt)("sup",null,"4"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function findClosestElements(arr: number[], k: number, x: number): number[] {\n  let lo = 0,\n    hi = arr.length - 1;\n  while (lo < hi) {\n    const mid = parseInt(`${(lo + hi) / 2}`);\n    x - arr[mid] > arr[mid + k] - x ? (lo = mid + 1) : (hi = mid);\n  }\n  return arr.slice(lo, lo + k);\n}\n")))}c.isMDXComponent=!0}}]);