"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[8186],{1870:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var i=n(7462),o=n(3366),l=(n(7294),n(3905)),r=n(5714),u=["components"],a={title:"414 \xb7 Divide Two Integers (Medium)",tags:["Math","Bit Manipulation","Medium"]},d=void 0,s={unversionedId:"414",id:"414",title:"414 \xb7 Divide Two Integers (Medium)",description:"<SolutionDocHead",source:"@site/solutions/414.mdx",sourceDirName:".",slug:"/414",permalink:"/leetcode/solutions/414",tags:[{label:"Math",permalink:"/leetcode/solutions/tags/math"},{label:"Bit Manipulation",permalink:"/leetcode/solutions/tags/bit-manipulation"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651239917,formattedLastUpdatedAt:"4/29/2022",frontMatter:{title:"414 \xb7 Divide Two Integers (Medium)",tags:["Math","Bit Manipulation","Medium"]},sidebar:"solutions",previous:{title:"406. Queue Reconstruction by Height (Medium)",permalink:"/leetcode/solutions/406"},next:{title:"451. Sort Characters By Frequency (Medium)",permalink:"/leetcode/solutions/451"}},p={},c=[],m={toc:c};function k(t){var e=t.components,n=(0,o.Z)(t,u);return(0,l.kt)("wrapper",(0,i.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)(r.Z,{solutionType:"medium",labels:["Math","Bit Manipulation"],url:"https://leetcode.com/problems/divide-two-integers/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"Given two integers ",(0,l.kt)("inlineCode",{parentName:"p"},"dividend")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"divisor"),", divide two integers ",(0,l.kt)("b",null,"without")," using multiplication, division, and mod operator."),(0,l.kt)("p",null,"The integer division should truncate toward zero, which means losing its fractional part. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"8.345")," would be truncated to ",(0,l.kt)("inlineCode",{parentName:"p"},"8"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"-2.7335")," would be truncated to ",(0,l.kt)("inlineCode",{parentName:"p"},"-2"),"."),(0,l.kt)("p",null,"Return the ",(0,l.kt)("b",null,"quotient")," after dividing ",(0,l.kt)("inlineCode",{parentName:"p"},"dividend")," by ",(0,l.kt)("inlineCode",{parentName:"p"},"divisor"),"."),(0,l.kt)("b",null,"Note"),": Assume we are dealing with an environment that could only store integers within the ",(0,l.kt)("b",null,"32-bit")," signed integer range: [\u22122",(0,l.kt)("sup",null,"31"),", 2",(0,l.kt)("sup",null,"31")," \u2212 1]. For this problem, if the quotient is ",(0,l.kt)("b",null,"strictly greater than")," 2",(0,l.kt)("sup",null,"31")," - 1, then return 2",(0,l.kt)("sup",null,"31")," - 1, and if the quotient is ",(0,l.kt)("b",null,"strictly less than")," -2",(0,l.kt)("sup",null,"31"),", then return -2",(0,l.kt)("sup",null,"31"),".",(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n")),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\n")),(0,l.kt)("b",null,"Constraints:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"-2",(0,l.kt)("sup",null,"31")," <= dividend, divisor <= 2",(0,l.kt)("sup",null,"31")," - 1"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"divisor != 0"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function divide(dividend: number, divisor: number): number {\n  if (divisor === 0) {\n    return 0;\n  }\n  if (dividend === 0) {\n    return 0;\n  }\n  if (dividend === -Math.pow(2, 31) && divisor === -1) {\n    return Math.pow(2, 31) - 1;\n  }\n  let isPositive = true;\n  if (dividend > 0 !== divisor > 0) {\n    isPositive = false;\n  }\n  divisor = Math.abs(divisor);\n  dividend = Math.abs(dividend);\n  let count = 1,\n    result = 0,\n    base = divisor;\n  while (dividend >= divisor) {\n    count = 1;\n    base = divisor;\n    while (base <= dividend >> 1) {\n      base = base << 1;\n      count = count << 1;\n    }\n    result += count;\n    dividend -= base;\n  }\n  if (!isPositive) {\n    result = -result;\n  }\n  return result;\n}\n")))}k.isMDXComponent=!0}}]);