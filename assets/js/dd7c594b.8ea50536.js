"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[8927],{4927:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return d}});var a=n(7462),s=n(3366),l=(n(7294),n(3905)),o=n(5714),r=["components"],i={title:"20. Valid Parentheses (Easy)",tags:["String","Stack","Easy"]},u=void 0,p={unversionedId:"20",id:"20",title:"20. Valid Parentheses (Easy)",description:"<SolutionDocHead",source:"@site/solutions/20.mdx",sourceDirName:".",slug:"/20",permalink:"/leetcode/solutions/20",tags:[{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Stack",permalink:"/leetcode/solutions/tags/stack"},{label:"Easy",permalink:"/leetcode/solutions/tags/easy"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651174866,formattedLastUpdatedAt:"4/29/2022",frontMatter:{title:"20. Valid Parentheses (Easy)",tags:["String","Stack","Easy"]},sidebar:"solutions",previous:{title:"19. Remove Nth Node From End of List (Medium)",permalink:"/leetcode/solutions/19"},next:{title:"21. Merge Two Sorted Lists (Easy)",permalink:"/leetcode/solutions/21"}},c={},d=[],k={toc:d};function m(e){var t=e.components,n=(0,s.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(o.Z,{solutionType:"easy",labels:["String","Stack"],companies:["Twitter","Airbnb","Amazon","Facebook","Microsoft","Bloomberg","Uber","Google"],url:"https://leetcode.com/problems/valid-parentheses/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"Given a string ",(0,l.kt)("inlineCode",{parentName:"p"},"s")," containing just the characters ",(0,l.kt)("inlineCode",{parentName:"p"},"'('"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"')'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'{'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'}'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'['")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"']'"),", determine if the input string is valid."),(0,l.kt)("p",null,"An input string is valid if:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Open brackets must be closed by the same type of brackets."),(0,l.kt)("li",{parentName:"ol"},"Open brackets must be closed in the correct order.")),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: s = "()"\nOutput: true\n')),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: s = "()[]{}"\nOutput: true\n')),(0,l.kt)("b",null,"Example 3:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: s = "(]"\nOutput: false\n')),(0,l.kt)("b",null,"Constraints:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"1 <= s.length <= 10",(0,l.kt)("sup",null,"4")),(0,l.kt)("li",{parentName:"ul"},"s consists of parentheses only '()[]{}'.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},'function isValid(s: string): boolean {\n  const stack = [];\n  for (let i = 0; i < s.length; i++) {\n    let c: string = s[i];\n    switch (c) {\n      case "(":\n        stack.push(")");\n        break;\n      case "[":\n        stack.push("]");\n        break;\n      case "{":\n        stack.push("}");\n        break;\n      default:\n        if (c !== stack.pop()) {\n          return false;\n        }\n    }\n  }\n  return stack.length === 0;\n}\n')))}m.isMDXComponent=!0}}]);