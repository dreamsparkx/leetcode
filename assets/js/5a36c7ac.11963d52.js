"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[3032],{9003:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return c}});var i=n(7462),l=n(3366),a=(n(7294),n(3905)),s=n(5714),o=["components"],r={title:"187. Repeated DNA Sequences (Medium)",tags:["Hash Table","String","Bit Manipulation","Sliding Window","Rolling Hash","Hash Function","Medium"]},u=void 0,d={unversionedId:"187",id:"187",title:"187. Repeated DNA Sequences (Medium)",description:"<SolutionDocHead",source:"@site/solutions/187.mdx",sourceDirName:".",slug:"/187",permalink:"/leetcode/solutions/187",tags:[{label:"Hash Table",permalink:"/leetcode/solutions/tags/hash-table"},{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Bit Manipulation",permalink:"/leetcode/solutions/tags/bit-manipulation"},{label:"Sliding Window",permalink:"/leetcode/solutions/tags/sliding-window"},{label:"Rolling Hash",permalink:"/leetcode/solutions/tags/rolling-hash"},{label:"Hash Function",permalink:"/leetcode/solutions/tags/hash-function"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650997715,formattedLastUpdatedAt:"4/26/2022",frontMatter:{title:"187. Repeated DNA Sequences (Medium)",tags:["Hash Table","String","Bit Manipulation","Sliding Window","Rolling Hash","Hash Function","Medium"]},sidebar:"solutions",previous:{title:"167. Two Sum II - Input Array Is Sorted (Medium)",permalink:"/leetcode/solutions/167"},next:{title:"189. Rotate Array (Medium)",permalink:"/leetcode/solutions/189"}},p={},c=[],A={toc:c};function m(e){var t=e.components,n=(0,l.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},A,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(s.Z,{solutionType:"medium",labels:["Hash Table","String","Bit Manipulation","Sliding Window","Rolling Hash","Hash Function"],companies:["LinkedIn"],url:"https://leetcode.com/problems/repeated-dna-sequences/",mdxType:"SolutionDocHead"}),(0,a.kt)("p",null,"The ",(0,a.kt)("b",null,"DNA sequence")," is composed of a series of nucleotides abbreviated as ",(0,a.kt)("inlineCode",{parentName:"p"},"'A'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'C'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'G'"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"'T'"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For example, ",(0,a.kt)("inlineCode",{parentName:"li"},'"ACGAATTCCG"')," is a ",(0,a.kt)("b",null,"DNA sequence"),".")),(0,a.kt)("p",null,"When studying ",(0,a.kt)("b",null,"DNA"),", it is useful to identify repeated sequences within the DNA."),(0,a.kt)("p",null,"Given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," that represents a ",(0,a.kt)("b",null,"DNA sequence"),", return all the ",(0,a.kt)("inlineCode",{parentName:"p"},"10"),"-",(0,a.kt)("b",null,"letter-long")," sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in ",(0,a.kt)("b",null,"any order"),"."),(0,a.kt)("b",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"\nOutput: ["AAAAACCCCC","CCCCCAAAAA"]\n')),(0,a.kt)("b",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "AAAAAAAAAAAAA"\nOutput: ["AAAAAAAAAA"]\n')),(0,a.kt)("b",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"1 <= s.length <= 10",(0,a.kt)("sup",null,"5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s[i]")," is either ",(0,a.kt)("inlineCode",{parentName:"li"},"'A'"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"'C'"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"'G'"),", or ",(0,a.kt)("inlineCode",{parentName:"li"},"'T'"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function findRepeatedDnaSequences(s: string): string[] {\n  let curr = s.slice(0, 10);\n  const seen = new Set([curr]);\n  const res: Set<string> = new Set();\n  for (let i = 10; i < s.length; i++) {\n    curr = curr.slice(1) + s[i];\n    if (seen.has(curr)) {\n      res.add(curr);\n    }\n    seen.add(curr);\n  }\n  return [...res];\n}\n")))}m.isMDXComponent=!0}}]);