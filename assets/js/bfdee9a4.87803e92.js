"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[2323],{6529:function(e,n,t){var r=t(7294),a=t(1285),l=(0,t(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));n.Z=function(e){var n=l(),t=e.labels;return r.createElement("div",{className:n.root},t.map((function(e,n){return r.createElement(a.Z,{label:e,key:n+"-"+e})})))}},5714:function(e,n,t){t.d(n,{Z:function(){return s}});var r=t(7294),a={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},l=function(e){var n=e.type,t="";switch(n){case"medium":t="Medium";break;case"hard":t="Hard";break;default:t="Easy"}return r.createElement("span",{className:a[n]},t)},o=t(6529),s=function(e){var n=e.solutionType,t=e.labels,a=e.companies,s=e.url;return r.createElement(r.Fragment,null,r.createElement(l,{type:n}),r.createElement("br",null),r.createElement("br",null),r.createElement(o.Z,{labels:t}),r.createElement("br",null),a&&a.length>0&&r.createElement(r.Fragment,null,"Companies:",r.createElement(o.Z,{labels:a}),r.createElement("br",null)),"URL: ",r.createElement("a",{href:s,target:"_blank",rel:"noopener noreferrer"},s),r.createElement("br",null),r.createElement("br",null))}},5554:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var r=t(7462),a=t(3366),l=(t(7294),t(3905)),o=t(5714),s=["components"],i={title:"22. Generate Parentheses (Medium)",tags:["String","Dynamic Programming","Backtracking","Medium","Uber","Google"]},u=void 0,c={unversionedId:"22",id:"22",title:"22. Generate Parentheses (Medium)",description:"<SolutionDocHead",source:"@site/solutions/22.mdx",sourceDirName:".",slug:"/22",permalink:"/leetcode/solutions/22",tags:[{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Dynamic Programming",permalink:"/leetcode/solutions/tags/dynamic-programming"},{label:"Backtracking",permalink:"/leetcode/solutions/tags/backtracking"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"},{label:"Uber",permalink:"/leetcode/solutions/tags/uber"},{label:"Google",permalink:"/leetcode/solutions/tags/google"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651240850,formattedLastUpdatedAt:"4/29/2022",frontMatter:{title:"22. Generate Parentheses (Medium)",tags:["String","Dynamic Programming","Backtracking","Medium","Uber","Google"]},sidebar:"solutions",previous:{title:"21. Merge Two Sorted Lists (Easy)",permalink:"/leetcode/solutions/21"},next:{title:"26. Remove Duplicates from Sorted Array (Easy)",permalink:"/leetcode/solutions/26"}},m={},p=[],d={toc:p};function g(e){var n=e.components,t=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(o.Z,{solutionType:"medium",labels:["String","Dynamic Programming","Backtracking","Medium"],companies:["Uber","Google"],url:"https://leetcode.com/problems/generate-parentheses/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"Given ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," pairs of parentheses, write a function to generate all combinations of well-formed parentheses."),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: n = 3\nOutput: ["((()))","(()())","(())()","()(())","()()()"]\n')),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: n = 1\nOutput: ["()"]\n')),(0,l.kt)("b",null,"Constraints:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1 <= n <= 8"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},'function generateParenthesis(n: number): string[] {\n  const output: string[] = [];\n  const dfs = (str: string, open: number, close: number) => {\n    // Close parenthesis can not be more than open parenthesis at any given time to stay valid\n    if (open > close) {\n      return;\n    }\n    // Base case. We now have n pairs of parenthesis\n    if (open == 0 && close === 0) {\n      output.push(str);\n      return;\n    }\n    // Insert open parenthesis and search for the next valid insertion.\n    if (open > 0) {\n      dfs(`${str}(`, open - 1, close);\n    }\n    // Insert close parenthesis and search for the next valid insertion.\n    if (close > 0) {\n      dfs(`${str})`, open, close - 1);\n    }\n  };\n  dfs("", n, n);\n  return output;\n}\n')))}g.isMDXComponent=!0}}]);