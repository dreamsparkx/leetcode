"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[8203],{1545:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=n.p+"assets/images/image-b186556a952ef2c368e9dbe5460551e2.png",i=n(5714),s=["components"],u={title:"543. Diameter of Binary Tree (Easy)",tags:["Tree","Depth First Search","Binary Tree","Easy","Facebook","Google"]},d=void 0,p={unversionedId:"543",id:"543",title:"543. Diameter of Binary Tree (Easy)",description:"<SolutionDocHead",source:"@site/solutions/543.mdx",sourceDirName:".",slug:"/543",permalink:"/leetcode/solutions/543",tags:[{label:"Tree",permalink:"/leetcode/solutions/tags/tree"},{label:"Depth First Search",permalink:"/leetcode/solutions/tags/depth-first-search"},{label:"Binary Tree",permalink:"/leetcode/solutions/tags/binary-tree"},{label:"Easy",permalink:"/leetcode/solutions/tags/easy"},{label:"Facebook",permalink:"/leetcode/solutions/tags/facebook"},{label:"Google",permalink:"/leetcode/solutions/tags/google"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651598924,formattedLastUpdatedAt:"5/3/2022",frontMatter:{title:"543. Diameter of Binary Tree (Easy)",tags:["Tree","Depth First Search","Binary Tree","Easy","Facebook","Google"]},sidebar:"solutions",previous:{title:"535. Encode and Decode TinyURL (Medium)",permalink:"/leetcode/solutions/535"},next:{title:"560. Subarray Sum Equals K (Medium)",permalink:"/leetcode/solutions/560"}},c={},m=[],h={toc:m};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{solutionType:"easy",labels:["Tree","Depth First Search","Binary Tree"],companies:["Facebook","Google"],url:"https://leetcode.com/problems/diameter-of-binary-tree/",mdxType:"SolutionDocHead"}),(0,a.kt)("p",null,"Given the ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, return the length of the ",(0,a.kt)("b",null,"diameter")," of the tree."),(0,a.kt)("p",null,"The ",(0,a.kt)("b",null,"diameter")," of a binary tree is the ",(0,a.kt)("b",null,"length")," of the longest path between any two nodes in a tree. This path may or may not pass through the ",(0,a.kt)("inlineCode",{parentName:"p"},"root"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("b",null,"length")," of a path between two nodes is represented by the number of edges between them."),(0,a.kt)("b",null,"Example 1:"),(0,a.kt)("br",null),(0,a.kt)("img",{src:l}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n")),(0,a.kt)("b",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1,2]\nOutput: 1\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=TreeNode.ts",title:"TreeNode.ts"},"class TreeNode {\n  val: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.left = left === undefined ? null : left;\n    this.right = right === undefined ? null : right;\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function diameterOfBinaryTree(root: TreeNode | null): number {\n  let diameter = 0;\n  dfs(root);\n  return diameter;\n  function dfs(node: TreeNode | null) {\n    if (!node) {\n      return 0;\n    }\n    const left = dfs(node.left);\n    const right = dfs(node.right);\n\n    // update diameter at every node\n    diameter = Math.max(diameter, left + right);\n\n    // update the largest number of edge so far\n    return 1 + Math.max(left, right);\n  }\n}\n")))}f.isMDXComponent=!0}}]);