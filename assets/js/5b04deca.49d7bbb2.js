"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[5545],{2145:function(e,t,r){r.r(t),r.d(t,{assets:function(){return h},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return m}});var n=r(7462),a=r(3366),l=(r(7294),r(3905)),o=r.p+"assets/images/image-341c47ed2d8dcf0100a0cdd7aab18447.png",i=r.p+"assets/images/image2-3608235953239ca573ced59642852b14.png",s=r(5714),u=["components"],d={title:"226. Invert Binary Tree (Easy)",tags:["Tree","Depth First Search","Breadth First Search","Binary Tree","Easy"]},c=void 0,p={unversionedId:"226",id:"226",title:"226. Invert Binary Tree (Easy)",description:"<SolutionDocHead",source:"@site/solutions/226.mdx",sourceDirName:".",slug:"/226",permalink:"/leetcode/solutions/226",tags:[{label:"Tree",permalink:"/leetcode/solutions/tags/tree"},{label:"Depth First Search",permalink:"/leetcode/solutions/tags/depth-first-search"},{label:"Breadth First Search",permalink:"/leetcode/solutions/tags/breadth-first-search"},{label:"Binary Tree",permalink:"/leetcode/solutions/tags/binary-tree"},{label:"Easy",permalink:"/leetcode/solutions/tags/easy"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651588683,formattedLastUpdatedAt:"5/3/2022",frontMatter:{title:"226. Invert Binary Tree (Easy)",tags:["Tree","Depth First Search","Breadth First Search","Binary Tree","Easy"]},sidebar:"solutions",previous:{title:"206. Reverse Linked List (Easy)",permalink:"/leetcode/solutions/206"},next:{title:"242. Valid Anagram (Easy)",permalink:"/leetcode/solutions/242"}},h={},m=[],k={toc:m};function g(e){var t=e.components,r=(0,a.Z)(e,u);return(0,l.kt)("wrapper",(0,n.Z)({},k,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(s.Z,{solutionType:"easy",labels:["Tree","Depth First Search","Breadth First Search","Binary Tree"],url:"https://leetcode.com/problems/invert-binary-tree/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"Given the ",(0,l.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, invert the tree, and return its root."),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("br",null),(0,l.kt)("img",{src:o,width:"483",height:"342"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n")),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("br",null),(0,l.kt)("img",{src:i,width:"483",height:"342"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: root = [2,1,3]\nOutput: [2,3,1]\n")),(0,l.kt)("b",null,"Example 3:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: root = []\nOutput: []\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=TreeNode.ts",title:"TreeNode.ts"},"class TreeNode {\n  val: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.left = left === undefined ? null : left;\n    this.right = right === undefined ? null : right;\n  }\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function invertTree(root: TreeNode | null): TreeNode | null {\n  if (!root) {\n    return root;\n  }\n  [root.left, root.right] = [invertTree(root.right), invertTree(root.left)];\n  return root;\n}\n")))}g.isMDXComponent=!0}}]);