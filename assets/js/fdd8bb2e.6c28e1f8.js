"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[2360],{6529:function(e,t,n){var r=n(7294),l=n(1285),a=(0,n(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));t.Z=function(e){var t=a(),n=e.labels;return r.createElement("div",{className:t.root},n.map((function(e,t){return r.createElement(l.Z,{label:e,key:t+"-"+e})})))}},5714:function(e,t,n){n.d(t,{Z:function(){return i}});var r=n(7294),l={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},a=function(e){var t=e.type,n="";switch(t){case"medium":n="Medium";break;case"hard":n="Hard";break;default:n="Easy"}return r.createElement("span",{className:l[t]},n)},o=n(6529),i=function(e){var t=e.solutionType,n=e.labels,l=e.companies,i=e.url;return r.createElement(r.Fragment,null,r.createElement(a,{type:t}),r.createElement("br",null),r.createElement("br",null),r.createElement(o.Z,{labels:n}),r.createElement("br",null),l&&l.length>0&&r.createElement(r.Fragment,null,"Companies:",r.createElement(o.Z,{labels:l}),r.createElement("br",null)),"URL: ",r.createElement("a",{href:i,target:"_blank",rel:"noopener noreferrer"},i),r.createElement("br",null),r.createElement("br",null))}},1559:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return c}});var r=n(7462),l=n(3366),a=(n(7294),n(3905)),o=n(5714),i=["components"],u={title:"406. Queue Reconstruction by Height (Medium)",tags:["Array","Greedy","Binary Indexed Tree","Segment Tree","Sorting","Medium","Google"]},s=void 0,p={unversionedId:"406",id:"406",title:"406. Queue Reconstruction by Height (Medium)",description:"<SolutionDocHead",source:"@site/solutions/406.mdx",sourceDirName:".",slug:"/406",permalink:"/leetcode/solutions/406",tags:[{label:"Array",permalink:"/leetcode/solutions/tags/array"},{label:"Greedy",permalink:"/leetcode/solutions/tags/greedy"},{label:"Binary Indexed Tree",permalink:"/leetcode/solutions/tags/binary-indexed-tree"},{label:"Segment Tree",permalink:"/leetcode/solutions/tags/segment-tree"},{label:"Sorting",permalink:"/leetcode/solutions/tags/sorting"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"},{label:"Google",permalink:"/leetcode/solutions/tags/google"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651240850,formattedLastUpdatedAt:"4/29/2022",frontMatter:{title:"406. Queue Reconstruction by Height (Medium)",tags:["Array","Greedy","Binary Indexed Tree","Segment Tree","Sorting","Medium","Google"]},sidebar:"solutions",previous:{title:"374. Guess Number Higher or Lower (Easy)",permalink:"/leetcode/solutions/374"},next:{title:"414 \xb7 Divide Two Integers (Medium)",permalink:"/leetcode/solutions/414"}},h={},c=[],m={toc:c};function d(e){var t=e.components,n=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{solutionType:"medium",labels:["Array","Greedy","Binary Indexed Tree","Segment Tree","Sorting"],companies:["Google"],url:"https://leetcode.com/problems/queue-reconstruction-by-height/",mdxType:"SolutionDocHead"}),(0,a.kt)("p",null,"You are given an array of ",(0,a.kt)("inlineCode",{parentName:"p"},"people"),", people, which are the attributes of some people in a queue (not necessarily in order). Each people","[i]"," = ","[h",(0,a.kt)("sub",null,"i"),", k",(0,a.kt)("sub",null,"i"),"]"," represents the i",(0,a.kt)("sup",null,"th")," person of height h",(0,a.kt)("sub",null,"i")," with ",(0,a.kt)("b",null,"exactly")," k",(0,a.kt)("sub",null,"i")," other people in front who have a height greater than or equal to h",(0,a.kt)("sub",null,"i"),"."),(0,a.kt)("p",null,"Reconstruct and return the queue that is represented by the input array ",(0,a.kt)("inlineCode",{parentName:"p"},"people"),". The returned queue should be formatted as an array ",(0,a.kt)("inlineCode",{parentName:"p"},"queue"),", where queue","[j]"," = ","[h",(0,a.kt)("sub",null,"j"),", k",(0,a.kt)("sub",null,"j"),"]"," is the attributes of the j",(0,a.kt)("sup",null,"th")," person in the queue (",(0,a.kt)("inlineCode",{parentName:"p"},"queue[0]")," is the person at the front of the queue)."),(0,a.kt)("b",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n")),(0,a.kt)("b",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n")),(0,a.kt)("b",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= people.length <= 2000")),(0,a.kt)("li",{parentName:"ul"},"0 <= h",(0,a.kt)("sub",null,"i")," <= 10",(0,a.kt)("sup",null,"6")),(0,a.kt)("li",{parentName:"ul"},"0 <= k",(0,a.kt)("sub",null,"i")," < people.length"),(0,a.kt)("li",{parentName:"ul"},"It is guaranteed that the queue can be reconstructed.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function reconstructQueue(people: number[][]): number[][] {\n  let res = [];\n  people.sort((a, b) => {\n    if (a[0] == b[0]) {\n      return a[1] - b[1];\n    }\n    return b[0] - a[0];\n  });\n  people.forEach((val) => {\n    res.splice(val[1], 0, val);\n  });\n  return res;\n}\n")))}d.isMDXComponent=!0}}]);