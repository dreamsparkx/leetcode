"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[9229],{6529:function(e,t,n){var r=n(7294),a=n(1285),l=(0,n(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));t.Z=function(e){var t=l(),n=e.labels;return r.createElement("div",{className:t.root},n.map((function(e,t){return r.createElement(a.Z,{label:e,key:t+"-"+e})})))}},5714:function(e,t,n){n.d(t,{Z:function(){return s}});var r=n(7294),a={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},l=function(e){var t=e.type,n="";switch(t){case"medium":n="Medium";break;case"hard":n="Hard";break;default:n="Easy"}return r.createElement("span",{className:a[t]},n)},o=n(6529),s=function(e){var t=e.solutionType,n=e.labels,a=e.companies,s=e.url;return r.createElement(r.Fragment,null,r.createElement(l,{type:t}),r.createElement("br",null),r.createElement("br",null),r.createElement(o.Z,{labels:n}),r.createElement("br",null),a&&a.length>0&&r.createElement(r.Fragment,null,"Companies:",r.createElement(o.Z,{labels:a}),r.createElement("br",null)),"URL: ",r.createElement("a",{href:s,target:"_blank",rel:"noopener noreferrer"},s),r.createElement("br",null),r.createElement("br",null))}},9138:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return c}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=n(5714),s=["components"],i={title:"26. Remove Duplicates from Sorted Array (Easy)",tags:["Array","Two Pointers","Easy"]},u=void 0,m={unversionedId:"26",id:"26",title:"26. Remove Duplicates from Sorted Array (Easy)",description:"<SolutionDocHead",source:"@site/solutions/26.mdx",sourceDirName:".",slug:"/26",permalink:"/leetcode/solutions/26",tags:[{label:"Array",permalink:"/leetcode/solutions/tags/array"},{label:"Two Pointers",permalink:"/leetcode/solutions/tags/two-pointers"},{label:"Easy",permalink:"/leetcode/solutions/tags/easy"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650915156,formattedLastUpdatedAt:"4/26/2022",frontMatter:{title:"26. Remove Duplicates from Sorted Array (Easy)",tags:["Array","Two Pointers","Easy"]},sidebar:"solutions",previous:{title:"21. Merge Two Sorted Lists (Easy)",permalink:"/leetcode/solutions/21"},next:{title:"30. Substring with Concatenation of All Words (Hard)",permalink:"/leetcode/solutions/30"}},p={},c=[],d={toc:c};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(o.Z,{solutionType:"easy",labels:["Array","Two Pointers"],url:"https://leetcode.com/problems/remove-duplicates-from-sorted-array/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"Given an integer array ",(0,l.kt)("inlineCode",{parentName:"p"},"nums")," sorted in ",(0,l.kt)("b",null,"non-decreasing order"),", remove the duplicates ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/In-place_algorithm"},"in-place")," such that each unique element appears only ",(0,l.kt)("b",null,"once"),". The ",(0,l.kt)("b",null,"relative order")," of the elements should be kept the ",(0,l.kt)("b",null,"same"),"."),(0,l.kt)("p",null,"Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the ",(0,l.kt)("b",null,"first part")," of the array ",(0,l.kt)("inlineCode",{parentName:"p"},"nums"),". More formally, if there are ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," elements after removing the duplicates, then the first ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," elements of ",(0,l.kt)("inlineCode",{parentName:"p"},"nums")," should hold the final result. It does not matter what you leave beyond the first ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," elements."),(0,l.kt)("p",null,"Return ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," after placing the final result in the first ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," slots of ",(0,l.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,l.kt)("p",null,"Do ",(0,l.kt)("b",null,"not")," allocate extra space for another array. You must do this by ",(0,l.kt)("inlineCode",{parentName:"p"},"modifying the input array")," in-place with O(1) extra memory."),(0,l.kt)("b",null,"Custom Judge:"),(0,l.kt)("p",null,"The judge will test your solution with the following code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"int[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n")),(0,l.kt)("p",null,"If all assertions pass, then your solution will be ",(0,l.kt)("b",null,"accepted"),"."),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n")),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function removeDuplicates(nums: number[]): number {\n  if (nums.length == 0) {\n    return 0;\n  }\n  let curr = nums[0];\n  let toFill = 1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] != curr) {\n      curr = nums[i];\n      nums[toFill] = curr;\n      toFill++;\n    }\n  } //for i\n  return toFill;\n}\n")))}h.isMDXComponent=!0}}]);