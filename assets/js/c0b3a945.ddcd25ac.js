"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[8503],{6529:function(e,t,n){var l=n(7294),a=n(1285),r=(0,n(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));t.Z=function(e){var t=r(),n=e.labels;return l.createElement("div",{className:t.root},n.map((function(e,t){return l.createElement(a.Z,{label:e,key:t+"-"+e})})))}},5714:function(e,t,n){n.d(t,{Z:function(){return i}});var l=n(7294),a={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},r=function(e){var t=e.type,n="";switch(t){case"medium":n="Medium";break;case"hard":n="Hard";break;default:n="Easy"}return l.createElement("span",{className:a[t]},n)},o=n(6529),i=function(e){var t=e.solutionType,n=e.labels,a=e.companies,i=e.url;return l.createElement(l.Fragment,null,l.createElement(r,{type:t}),l.createElement("br",null),l.createElement("br",null),l.createElement(o.Z,{labels:n}),l.createElement("br",null),a&&a.length>0&&l.createElement(l.Fragment,null,"Companies:",l.createElement(o.Z,{labels:a}),l.createElement("br",null)),"URL: ",l.createElement("a",{href:i,target:"_blank",rel:"noopener noreferrer"},i),l.createElement("br",null),l.createElement("br",null))}},7891:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return p}});var l=n(7462),a=n(3366),r=(n(7294),n(3905)),o=n.p+"assets/images/image-ab770aac1356b586b1c3ba3f32c46ccd.png",i=n(5714),s=["components"],u={title:"19. Remove Nth Node From End of List (Medium)",tags:["Linked List","Two Pointers","Medium"]},d=void 0,m={unversionedId:"19",id:"19",title:"19. Remove Nth Node From End of List (Medium)",description:"<SolutionDocHead",source:"@site/solutions/19.mdx",sourceDirName:".",slug:"/19",permalink:"/leetcode/solutions/19",tags:[{label:"Linked List",permalink:"/leetcode/solutions/tags/linked-list"},{label:"Two Pointers",permalink:"/leetcode/solutions/tags/two-pointers"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650915156,formattedLastUpdatedAt:"4/26/2022",frontMatter:{title:"19. Remove Nth Node From End of List (Medium)",tags:["Linked List","Two Pointers","Medium"]},sidebar:"solutions",previous:{title:"18. 4Sum (Medium)",permalink:"/leetcode/solutions/18"},next:{title:"21. Merge Two Sorted Lists (Easy)",permalink:"/leetcode/solutions/21"}},c={},p=[],f={toc:p};function k(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,l.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{solutionType:"medium",labels:["Linked List","Two Pointers"],url:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/",mdxType:"SolutionDocHead"}),(0,r.kt)("p",null,"Given the ",(0,r.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"nth")," node from the end of the list and return its head."),(0,r.kt)("b",null,"Example 1:"),(0,r.kt)("br",null),(0,r.kt)("img",{src:o,width:"483",height:"342"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n")),(0,r.kt)("b",null,"Example 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: head = [1], n = 1\nOutput: []\n")),(0,r.kt)("b",null,"Example 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: head = [1,2], n = 1\nOutput: [1]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"class ListNode {\n  val: number;\n  next: ListNode | null;\n  constructor(val?: number, next?: ListNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.next = next === undefined ? null : next;\n  }\n}\n\nfunction removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {\n  let slow: ListNode = head,\n    fast: ListNode = head;\n  for (let i = 0; i < n; i++) {\n    fast = fast.next;\n  }\n  if (!fast) {\n    return head.next;\n  }\n  while (fast.next) {\n    fast = fast.next;\n    slow = slow.next;\n  }\n  slow.next = slow.next.next;\n  return head;\n}\n")))}k.isMDXComponent=!0}}]);