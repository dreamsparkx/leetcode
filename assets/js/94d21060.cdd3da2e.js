"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[8901],{5448:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return d}});var o=n(7462),l=n(3366),a=(n(7294),n(3905)),s=n(5714),i=["components"],r={title:"316. Remove Duplicate Letters (Medium)",tags:["String","Stack","Greedy","Monotonic Stack","Medium","Google"]},c=void 0,u={unversionedId:"316",id:"316",title:"316. Remove Duplicate Letters (Medium)",description:"<SolutionDocHead",source:"@site/solutions/316.mdx",sourceDirName:".",slug:"/316",permalink:"/leetcode/solutions/316",tags:[{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Stack",permalink:"/leetcode/solutions/tags/stack"},{label:"Greedy",permalink:"/leetcode/solutions/tags/greedy"},{label:"Monotonic Stack",permalink:"/leetcode/solutions/tags/monotonic-stack"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"},{label:"Google",permalink:"/leetcode/solutions/tags/google"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651240850,formattedLastUpdatedAt:"4/29/2022",frontMatter:{title:"316. Remove Duplicate Letters (Medium)",tags:["String","Stack","Greedy","Monotonic Stack","Medium","Google"]},sidebar:"solutions",previous:{title:"295. Find Median from Data Stream (Hard)",permalink:"/leetcode/solutions/295"},next:{title:"338. Counting Bits (Easy)",permalink:"/leetcode/solutions/338"}},p={},d=[],m={toc:d};function k(e){var t=e.components,n=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(s.Z,{solutionType:"medium",labels:["String","Stack","Greedy","Monotonic Stack"],companies:["Google"],url:"https://leetcode.com/problems/remove-duplicate-letters/",mdxType:"SolutionDocHead"}),(0,a.kt)("p",null,"Given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),", remove duplicate letters so that every letter appears once and only once. You must make sure your result is ",(0,a.kt)("b",null,"the smallest in lexicographical order")," among all possible results."),(0,a.kt)("b",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "bcabc"\nOutput: "abc"\n')),(0,a.kt)("b",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "cbacdcbc"\nOutput: "acdb"\n')),(0,a.kt)("b",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"1 <= s.length <= 10",(0,a.kt)("sup",null,"4")),(0,a.kt)("li",{parentName:"ul"},"s consists of lowercase English letters.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},'function removeDuplicateLetters(s: string): string {\n  let stack: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    // if s[i] already appears in stack, jump to next loop\n    if (stack.indexOf(char) > -1) {\n      continue;\n    }\n    while (\n      stack.length > 0 &&\n      stack[stack.length - 1] > char &&\n      s.indexOf(stack[stack.length - 1], i) > i\n    ) {\n      stack.pop();\n    }\n    stack.push(char);\n  }\n  return stack.join("");\n}\n')))}k.isMDXComponent=!0}}]);