"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[5185],{6529:function(e,t,n){var a=n(7294),r=n(1285),l=(0,n(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));t.Z=function(e){var t=l(),n=e.labels;return a.createElement("div",{className:t.root},n.map((function(e,t){return a.createElement(r.Z,{label:e,key:t+"-"+e})})))}},5714:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(7294),r={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},l=function(e){var t=e.type,n="";switch(t){case"medium":n="Medium";break;case"hard":n="Hard";break;default:n="Easy"}return a.createElement("span",{className:r[t]},n)},i=n(6529),s=function(e){var t=e.solutionType,n=e.labels,r=e.companies,s=e.url;return a.createElement(a.Fragment,null,a.createElement(l,{type:t}),a.createElement("br",null),a.createElement("br",null),a.createElement(i.Z,{labels:n}),a.createElement("br",null),r&&r.length>0&&a.createElement(a.Fragment,null,"Companies:",a.createElement(i.Z,{labels:r}),a.createElement("br",null)),"URL: ",a.createElement("a",{href:s,target:"_blank",rel:"noopener noreferrer"},s),a.createElement("br",null),a.createElement("br",null))}},2325:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=n(5714),s=["components"],o={title:"242. Valid Anagram (Easy)",tags:["Hash Table","String","Sorting","Easy"]},u=void 0,c={unversionedId:"242",id:"242",title:"242. Valid Anagram (Easy)",description:"<SolutionDocHead",source:"@site/solutions/242.mdx",sourceDirName:".",slug:"/242",permalink:"/leetcode/solutions/242",tags:[{label:"Hash Table",permalink:"/leetcode/solutions/tags/hash-table"},{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Sorting",permalink:"/leetcode/solutions/tags/sorting"},{label:"Easy",permalink:"/leetcode/solutions/tags/easy"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650980131,formattedLastUpdatedAt:"4/26/2022",frontMatter:{title:"242. Valid Anagram (Easy)",tags:["Hash Table","String","Sorting","Easy"]},sidebar:"solutions",previous:{title:"206. Reverse Linked List (Easy)",permalink:"/leetcode/solutions/206"},next:{title:"344. Reverse String (Easy)",permalink:"/leetcode/solutions/344"}},m={},p=[],d={toc:p};function g(e){var t=e.components,n=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(i.Z,{solutionType:"easy",labels:["Hash Table","String","Sorting"],url:"https://leetcode.com/problems/valid-anagram/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"Given two strings ",(0,l.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"t"),", return ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,l.kt)("inlineCode",{parentName:"p"},"t")," is an anagram of ",(0,l.kt)("inlineCode",{parentName:"p"},"s"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,"An ",(0,l.kt)("b",null,"Anagram")," is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: s = "anagram", t = "nagaram"\nOutput: true\n')),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: s = "rat", t = "car"\nOutput: false\n')),(0,l.kt)("b",null,"Constraints:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"1 <= s.length, t.length <= 5 ","*"," 10",(0,l.kt)("sup",null,"4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"t")," consist of lowercase English letters.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},'function isAnagram(s: string, t: string): boolean {\n  if (s.length !== t.length) {\n    return false;\n  }\n  const countLeftArr = new Array(26).fill(0);\n  const countRightArr = new Array(26).fill(0);\n  for (let i = 0; i < s.length; i++) {\n    const leftChar = s[i];\n    const rightChar = t[i];\n    countLeftArr[leftChar.charCodeAt(0) - 97]++;\n    countRightArr[rightChar.charCodeAt(0) - 97]++;\n  }\n  if (countLeftArr.join("#") === countRightArr.join("#")) return true;\n  return false;\n}\n')))}g.isMDXComponent=!0}}]);