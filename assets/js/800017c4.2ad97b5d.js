"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[3660],{6158:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),s=n(5714),l=["components"],i={title:"621. Task Scheduler (Medium)",tags:["Array","Hash Table","Greedy","Sorting","Heap","Priority Queue","Counting","Medium","Facebook"]},u=void 0,c={unversionedId:"621",id:"621",title:"621. Task Scheduler (Medium)",description:"<SolutionDocHead",source:"@site/solutions/621.mdx",sourceDirName:".",slug:"/621",permalink:"/leetcode/solutions/621",tags:[{label:"Array",permalink:"/leetcode/solutions/tags/array"},{label:"Hash Table",permalink:"/leetcode/solutions/tags/hash-table"},{label:"Greedy",permalink:"/leetcode/solutions/tags/greedy"},{label:"Sorting",permalink:"/leetcode/solutions/tags/sorting"},{label:"Heap",permalink:"/leetcode/solutions/tags/heap"},{label:"Priority Queue",permalink:"/leetcode/solutions/tags/priority-queue"},{label:"Counting",permalink:"/leetcode/solutions/tags/counting"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"},{label:"Facebook",permalink:"/leetcode/solutions/tags/facebook"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651500748,formattedLastUpdatedAt:"5/2/2022",frontMatter:{title:"621. Task Scheduler (Medium)",tags:["Array","Hash Table","Greedy","Sorting","Heap","Priority Queue","Counting","Medium","Facebook"]},sidebar:"solutions",previous:{title:"617. Merge Two Binary Trees (Easy)",permalink:"/leetcode/solutions/617"},next:{title:"647. Palindromic Substrings (Medium)",permalink:"/leetcode/solutions/647"}},d={},p=[],m={toc:p};function h(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{solutionType:"medium",labels:["Array","Hash Table","Greedy","Sorting","Heap","Priority Queue","Counting"],companies:["Facebook"],url:"https://leetcode.com/problems/task-scheduler/",mdxType:"SolutionDocHead"}),(0,r.kt)("p",null,"Given a characters array ",(0,r.kt)("inlineCode",{parentName:"p"},"tasks"),", representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle."),(0,r.kt)("p",null,"However, there is a non-negative integer n that represents the cooldown period between two ",(0,r.kt)("b",null,"same tasks")," (the same letter in the array), that is that there must be at least n units of time between any two same tasks."),(0,r.kt)("p",null,"Return the least number of units of times that the CPU will take to finish all the given tasks."),(0,r.kt)("b",null,"Example 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: tasks = ["A","A","A","B","B","B"], n = 2\nOutput: 8\nExplanation:\nA -> B -> idle -> A -> B -> idle -> A -> B\nThere is at least 2 units of time between any two same tasks.\n')),(0,r.kt)("b",null,"Example 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: tasks = ["A","A","A","B","B","B"], n = 0\nOutput: 6\nExplanation: On this case any permutation of size 6 would work since n = 0.\n["A","A","A","B","B","B"]\n["A","B","A","B","A","B"]\n["B","B","B","A","A","A"]\n...\nAnd so on.\n')),(0,r.kt)("b",null,"Example 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2\nOutput: 16\nExplanation:\nOne possible solution is\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function leastInterval(tasks: string[], n: number): number {\n  const charMap = new Map();\n  let maxCharCount = 0;\n  let maxChar = tasks[0];\n  for (let char of tasks) {\n    charMap.set(char, (charMap.get(char) || 0) + 1);\n    if (charMap.get(char) > maxCharCount) {\n      maxCharCount = charMap.get(char);\n      maxChar = char;\n    }\n  }\n  let idleCount = (maxCharCount - 1) * n;\n  charMap.forEach((count, char) => {\n    // 'return' inside forEach() serve as 'continue'\n    if (char === maxChar) return;\n    if (count === maxCharCount) idleCount -= count - 1;\n    else idleCount -= count;\n  });\n  if (idleCount <= 0) return tasks.length;\n  return tasks.length + idleCount;\n}\n")))}h.isMDXComponent=!0}}]);