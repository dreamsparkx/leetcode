"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[1943],{1275:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=n(5714),l=["components"],i={title:"451. Sort Characters By Frequency (Medium)",tags:["Hash Table","String","Sorting","Heap","Priority Queue","Bucket Sort","Counting","Medium"]},u=void 0,c={unversionedId:"451",id:"451",title:"451. Sort Characters By Frequency (Medium)",description:"<SolutionDocHead",source:"@site/solutions/451.mdx",sourceDirName:".",slug:"/451",permalink:"/leetcode/solutions/451",tags:[{label:"Hash Table",permalink:"/leetcode/solutions/tags/hash-table"},{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Sorting",permalink:"/leetcode/solutions/tags/sorting"},{label:"Heap",permalink:"/leetcode/solutions/tags/heap"},{label:"Priority Queue",permalink:"/leetcode/solutions/tags/priority-queue"},{label:"Bucket Sort",permalink:"/leetcode/solutions/tags/bucket-sort"},{label:"Counting",permalink:"/leetcode/solutions/tags/counting"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650984126,formattedLastUpdatedAt:"4/26/2022",frontMatter:{title:"451. Sort Characters By Frequency (Medium)",tags:["Hash Table","String","Sorting","Heap","Priority Queue","Bucket Sort","Counting","Medium"]},sidebar:"solutions",previous:{title:"374. Guess Number Higher or Lower (Easy)",permalink:"/leetcode/solutions/374"},next:{title:"535. Encode and Decode TinyURL (Medium)",permalink:"/leetcode/solutions/535"}},p={},d=[],m={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(s.Z,{solutionType:"medium",labels:["Hash Table","String","Sorting","Heap","Bucket Sort","Counting","Priority Queue"],companies:["Google","Amazon"],url:"https://leetcode.com/problems/sort-characters-by-frequency/",mdxType:"SolutionDocHead"}),(0,o.kt)("p",null,"Given a string ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),", sort it in ",(0,o.kt)("b",null,"decreasing order")," based on the ",(0,o.kt)("b",null,"frequency")," of the characters. The ",(0,o.kt)("b",null,"frequency")," of a character is the number of times it appears in the string."),(0,o.kt)("p",null,"Return the sorted string. If there are multiple answers, return any of them."),(0,o.kt)("b",null,"Example 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: s = \"tree\"\nOutput: \"eert\"\nExplanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n")),(0,o.kt)("b",null,"Example 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "cccaaa"\nOutput: "aaaccc"\nExplanation: Both \'c\' and \'a\' appear three times, so both "cccaaa" and "aaaccc" are valid answers.\nNote that "cacaca" is incorrect, as the same characters must be together.\n')),(0,o.kt)("b",null,"Example 3:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "Aabb"\nOutput: "bbAa"\nExplanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.\nNote that \'A\' and \'a\' are treated as two different characters.\n')),(0,o.kt)("b",null,"Constraints:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1 <= s.length <= 5 ","*"," 10",(0,o.kt)("sup",null,"5")),(0,o.kt)("li",{parentName:"ul"},"s consists of uppercase and lowercase English letters and digits.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},'function frequencySort(s: string): string {\n  let seen = {};\n  let result = "";\n  for (const char of s) {\n    if (seen[char]) {\n      seen[char]++;\n    } else {\n      seen[char] = 1;\n    }\n  }\n  let sortedCharacterArray = Object.keys(seen).sort((a, b) => {\n    return seen[b] - seen[a];\n  });\n  for (let char of sortedCharacterArray) {\n    result += char.repeat(seen[char]);\n  }\n  return result;\n}\n')))}h.isMDXComponent=!0}}]);