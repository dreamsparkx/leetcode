"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[7005],{5036:function(n,e,t){t.r(e),t.d(e,{assets:function(){return m},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=t(5714),l=["components"],s={title:"4. Median of Two Sorted Arrays (Hard)",tags:["Array","Binary Search","Divide and Conquer"]},d=void 0,u={unversionedId:"4",id:"4",title:"4. Median of Two Sorted Arrays (Hard)",description:"<SolutionDocHead",source:"@site/solutions/4.mdx",sourceDirName:".",slug:"/4",permalink:"/leetcode/solutions/4",tags:[{label:"Array",permalink:"/leetcode/solutions/tags/array"},{label:"Binary Search",permalink:"/leetcode/solutions/tags/binary-search"},{label:"Divide and Conquer",permalink:"/leetcode/solutions/tags/divide-and-conquer"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650482437,formattedLastUpdatedAt:"4/21/2022",frontMatter:{title:"4. Median of Two Sorted Arrays (Hard)",tags:["Array","Binary Search","Divide and Conquer"]},sidebar:"solutions",previous:{title:"3. Longest Substring Without Repeating Characters (Medium)",permalink:"/leetcode/solutions/3"},next:{title:"5. Longest Palindromic Substring (Medium)",permalink:"/leetcode/solutions/5"}},m={},c=[],p={toc:c};function f(n){var e=n.components,t=(0,a.Z)(n,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{solutionType:"hard",labels:["Array","Binary Search","Divide and Conquer"],url:"https://leetcode.com/problems/median-of-two-sorted-arrays/",mdxType:"SolutionDocHead"}),(0,i.kt)("p",null,"Given two sorted arrays ",(0,i.kt)("inlineCode",{parentName:"p"},"nums1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"nums2")," of size ",(0,i.kt)("inlineCode",{parentName:"p"},"m")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," respectively, return ",(0,i.kt)("b",null,"the median")," of the two sorted arrays."),(0,i.kt)("p",null,"The overall run time complexity should be ",(0,i.kt)("inlineCode",{parentName:"p"},"O(log (m+n))"),"."),(0,i.kt)("b",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n")),(0,i.kt)("b",null,"Example 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function findMedianSortedArrays(ar1: number[], ar2: number[]): number {\n  let n = ar1.length;\n  let m = ar2.length;\n  let i = 0;\n\n  // Current index of input array ar2[]\n  let j = 0;\n  let count;\n  let m1 = -1,\n    m2 = -1;\n\n  // Since there are (n+m) elements,\n  // There are following two cases\n  // if n+m is odd then the middle\n  // index is median i.e. (m+n)/2\n  if ((m + n) % 2 == 1) {\n    for (count = 0; count <= (n + m) / 2; count++) {\n      if (i != n && j != m) {\n        m1 = ar1[i] > ar2[j] ? ar2[j++] : ar1[i++];\n      } else if (i < n) {\n        m1 = ar1[i++];\n      }\n\n      // For case when j<m,\n      else {\n        m1 = ar2[j++];\n      }\n    }\n    return m1;\n  }\n\n  // Median will be average of elements\n  // at index ((m+n)/2 - 1) and (m+n)/2\n  // in the array obtained after merging\n  // ar1 and ar2\n  else {\n    for (count = 0; count <= (n + m) / 2; count++) {\n      m2 = m1;\n      if (i != n && j != m) {\n        m1 = ar1[i] > ar2[j] ? ar2[j++] : ar1[i++];\n      } else if (i < n) {\n        m1 = ar1[i++];\n      }\n\n      // For case when j<m,\n      else {\n        m1 = ar2[j++];\n      }\n    }\n    return (m1 + m2) / 2;\n  }\n}\n")))}f.isMDXComponent=!0}}]);