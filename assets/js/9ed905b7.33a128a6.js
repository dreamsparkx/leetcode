"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[8693],{7348:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return d},metadata:function(){return u},toc:function(){return p}});var a=t(7462),i=t(3366),l=(t(7294),t(3905)),r=t(5714),s=["components"],d={title:"295. Find Median from Data Stream (Hard)",tags:["Two Pointers","Design","Sorting","Heap","Priority Queue","Data Stream","Hard"]},o=void 0,u={unversionedId:"295",id:"295",title:"295. Find Median from Data Stream (Hard)",description:"<SolutionDocHead",source:"@site/solutions/295.mdx",sourceDirName:".",slug:"/295",permalink:"/leetcode/solutions/295",tags:[{label:"Two Pointers",permalink:"/leetcode/solutions/tags/two-pointers"},{label:"Design",permalink:"/leetcode/solutions/tags/design"},{label:"Sorting",permalink:"/leetcode/solutions/tags/sorting"},{label:"Heap",permalink:"/leetcode/solutions/tags/heap"},{label:"Priority Queue",permalink:"/leetcode/solutions/tags/priority-queue"},{label:"Data Stream",permalink:"/leetcode/solutions/tags/data-stream"},{label:"Hard",permalink:"/leetcode/solutions/tags/hard"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651168376,formattedLastUpdatedAt:"4/28/2022",frontMatter:{title:"295. Find Median from Data Stream (Hard)",tags:["Two Pointers","Design","Sorting","Heap","Priority Queue","Data Stream","Hard"]},sidebar:"solutions",previous:{title:"278. First Bad Version (Easy)",permalink:"/leetcode/solutions/278"},next:{title:"316. Remove Duplicate Letters (Medium)",permalink:"/leetcode/solutions/316"}},m={},p=[],h={toc:p};function c(e){var n=e.components,t=(0,i.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(r.Z,{solutionType:"hard",labels:["Two Pointers","Design","Sorting","Heap","Priority Queue","Data Stream"],url:"https://leetcode.com/problems/find-median-from-data-stream/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"The ",(0,l.kt)("b",null,"median")," is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For example, for ",(0,l.kt)("inlineCode",{parentName:"p"},"arr = [2,3,4]"),", the median is ",(0,l.kt)("inlineCode",{parentName:"p"},"3"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For example, for ",(0,l.kt)("inlineCode",{parentName:"p"},"arr = [2,3]"),", the median is ",(0,l.kt)("inlineCode",{parentName:"p"},"(2 + 3) / 2 = 2.5"),".\nImplement the MedianFinder class:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"MedianFinder()")," initializes the ",(0,l.kt)("inlineCode",{parentName:"p"},"MedianFinder")," object.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"void addNum(int num)")," adds the integer ",(0,l.kt)("inlineCode",{parentName:"p"},"num")," from the data stream to the data structure.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"double findMedian()")," returns the median of all elements so far. Answers within 10",(0,l.kt)("sup",null,"-5")," of the actual answer will be accepted."))),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input\n["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n')),(0,l.kt)("b",null,"Constraints:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"-10",(0,l.kt)("sup",null,"5")," <= num <= 10",(0,l.kt)("sup",null,"5")),(0,l.kt)("li",{parentName:"ul"},"There will be at least one element in the data structure before calling ",(0,l.kt)("inlineCode",{parentName:"li"},"findMedian"),"."),(0,l.kt)("li",{parentName:"ul"},"At most 5 ","*"," 10",(0,l.kt)("sup",null,"4")," calls will be made to ",(0,l.kt)("inlineCode",{parentName:"li"},"addNum")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"findMedian"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"class Heap {\n  size: number;\n  values: number[];\n  comparator: (a: number, b: number) => number;\n  constructor(comparator: (a: number, b: number) => number) {\n    this.size = 0;\n    this.values = [];\n    this.comparator = comparator || Heap.minComparator;\n  }\n  static minComparator(a: number, b: number) {\n    return a - b;\n  }\n  static maxComparator(a: number, b: number) {\n    return b - a;\n  }\n  add(val: number) {\n    this.values.push(val);\n    this.size++;\n    this.bubbleUp();\n  }\n  peek() {\n    return this.values[0] || null;\n  }\n  poll() {\n    const max = this.values[0];\n    const end = this.values.pop();\n    this.size--;\n    if (this.values.length) {\n      this.values[0] = end;\n      this.bubbleDown();\n    }\n    return max;\n  }\n  bubbleUp() {\n    let index = this.values.length - 1;\n    let parent = Math.floor((index - 1) / 2);\n    while (this.comparator(this.values[index], this.values[parent]) < 0) {\n      [this.values[parent], this.values[index]] = [\n        this.values[index],\n        this.values[parent],\n      ];\n      index = parent;\n      parent = Math.floor((index - 1) / 2);\n    }\n  }\n  bubbleDown() {\n    let index = 0,\n      length = this.values.length;\n    while (true) {\n      let left = null,\n        right = null,\n        swap = null,\n        leftIndex = index * 2 + 1,\n        rightIndex = index * 2 + 2;\n      if (leftIndex < length) {\n        left = this.values[leftIndex];\n        if (this.comparator(left, this.values[index]) < 0) {\n          swap = leftIndex;\n        }\n      }\n      if (rightIndex < length) {\n        right = this.values[rightIndex];\n        if (\n          (swap != null && this.comparator(right, left) < 0) ||\n          (swap === null && this.comparator(right, this.values[index]))\n        ) {\n          swap = rightIndex;\n        }\n      }\n      if (swap === null) {\n        break;\n      }\n      [this.values[index], this.values[swap]] = [\n        this.values[swap],\n        this.values[index],\n      ];\n      index = swap;\n    }\n  }\n}\n\nclass MedianFinder {\n  maxHeap: Heap;\n  minHeap: Heap;\n  constructor() {\n    this.maxHeap = new Heap(Heap.maxComparator);\n    this.minHeap = new Heap(Heap.minComparator);\n  }\n\n  addNum(num: number): void {\n    if (this.maxHeap.peek() === null || num < this.maxHeap.peek()) {\n      this.maxHeap.add(num);\n    } else {\n      this.minHeap.add(num);\n    }\n    if (this.maxHeap.size - this.minHeap.size > 1) {\n      this.minHeap.add(this.maxHeap.poll());\n    } else if (this.minHeap.size - this.maxHeap.size > 1) {\n      this.maxHeap.add(this.minHeap.poll());\n    }\n  }\n\n  findMedian(): number {\n    if (this.maxHeap.size > this.minHeap.size) {\n      return this.maxHeap.peek();\n    } else if (this.maxHeap.size < this.minHeap.size) {\n      return this.minHeap.peek();\n    } else {\n      return (this.maxHeap.peek() + this.minHeap.peek()) / 2;\n    }\n  }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */\n")))}c.isMDXComponent=!0}}]);