"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[9423],{9039:function(e,t,r){r.r(t),r.d(t,{assets:function(){return m},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return u},metadata:function(){return h},toc:function(){return p}});var n=r(7462),o=r(3366),l=(r(7294),r(3905)),a=r.p+"assets/images/image-ee4461204c93cdfb311741df31521fa3.png",s=r(5714),i=["components"],u={title:"617. Merge Two Binary Trees (Easy)",tags:["Tree","Depth First Search","Breadth First Search","Binary Tree","Easy","Amazon"]},d=void 0,h={unversionedId:"617",id:"617",title:"617. Merge Two Binary Trees (Easy)",description:"<SolutionDocHead",source:"@site/solutions/617.mdx",sourceDirName:".",slug:"/617",permalink:"/leetcode/solutions/617",tags:[{label:"Tree",permalink:"/leetcode/solutions/tags/tree"},{label:"Depth First Search",permalink:"/leetcode/solutions/tags/depth-first-search"},{label:"Breadth First Search",permalink:"/leetcode/solutions/tags/breadth-first-search"},{label:"Binary Tree",permalink:"/leetcode/solutions/tags/binary-tree"},{label:"Easy",permalink:"/leetcode/solutions/tags/easy"},{label:"Amazon",permalink:"/leetcode/solutions/tags/amazon"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651591411,formattedLastUpdatedAt:"5/3/2022",frontMatter:{title:"617. Merge Two Binary Trees (Easy)",tags:["Tree","Depth First Search","Breadth First Search","Binary Tree","Easy","Amazon"]},sidebar:"solutions",previous:{title:"560. Subarray Sum Equals K (Medium)",permalink:"/leetcode/solutions/560"},next:{title:"621. Task Scheduler (Medium)",permalink:"/leetcode/solutions/621"}},m={},p=[],c={toc:p};function g(e){var t=e.components,r=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(s.Z,{solutionType:"easy",labels:["Tree","Depth First Search","Breadth First Search","Binary Tree"],companies:["Amazon"],url:"https://leetcode.com/problems/merge-two-binary-trees/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"You are given two binary trees ",(0,l.kt)("inlineCode",{parentName:"p"},"root1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"root2"),"."),(0,l.kt)("p",null,"Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree."),(0,l.kt)("p",null,"Return the merged tree."),(0,l.kt)("b",null,"Note:")," The merging process must start from the root nodes of both trees.",(0,l.kt)("br",null),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("br",null),(0,l.kt)("img",{src:a}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]\n")),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: root1 = [1], root2 = [1,2]\nOutput: [2,2]\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=TreeNode.ts",title:"TreeNode.ts"},"class TreeNode {\n  val: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.left = left === undefined ? null : left;\n    this.right = right === undefined ? null : right;\n  }\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function mergeTrees(\n  root1: TreeNode | null,\n  root2: TreeNode | null\n): TreeNode | null {\n  // goal is to merge root1 to root2\n\n  // if one of the node missing, return the other\n  if (root1 === null) {\n    return root2;\n  }\n  if (root2 === null) {\n    return root1;\n  }\n  // if both nodes exist, sum the values\n  root1.val += root2.val;\n\n  // do the same thing for left and right branch\n  root1.left = mergeTrees(root1.left, root2.left);\n  root1.right = mergeTrees(root1.right, root2.right);\n\n  // return the merged root1\n  return root1;\n}\n")))}g.isMDXComponent=!0}}]);