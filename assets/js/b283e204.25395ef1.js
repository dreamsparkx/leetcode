"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[1966],{6529:function(e,n,t){var r=t(7294),a=t(1285),i=(0,t(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));n.Z=function(e){var n=i(),t=e.labels;return r.createElement("div",{className:n.root},t.map((function(e,n){return r.createElement(a.Z,{label:e,key:n+"-"+e})})))}},5714:function(e,n,t){t.d(n,{Z:function(){return o}});var r=t(7294),a={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},i=function(e){var n=e.type,t="";switch(n){case"medium":t="Medium";break;case"hard":t="Hard";break;default:t="Easy"}return r.createElement("span",{className:a[n]},t)},l=t(6529),o=function(e){var n=e.solutionType,t=e.labels,a=e.companies,o=e.url;return r.createElement(r.Fragment,null,r.createElement(i,{type:n}),r.createElement("br",null),r.createElement("br",null),r.createElement(l.Z,{labels:t}),r.createElement("br",null),a&&a.length>0&&r.createElement(r.Fragment,null,"Companies:",r.createElement(l.Z,{labels:a}),r.createElement("br",null)),"URL: ",r.createElement("a",{href:o,target:"_blank",rel:"noopener noreferrer"},o),r.createElement("br",null),r.createElement("br",null))}},5992:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return c}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),l=t(5714),o=["components"],u={title:"702. Search in a Sorted Array of Unknown Size (Medium)",tags:["Array","Binary Search","Medium"]},s=void 0,d={unversionedId:"702",id:"702",title:"702. Search in a Sorted Array of Unknown Size (Medium)",description:"<SolutionDocHead",source:"@site/solutions/702.mdx",sourceDirName:".",slug:"/702",permalink:"/leetcode/solutions/702",tags:[{label:"Array",permalink:"/leetcode/solutions/tags/array"},{label:"Binary Search",permalink:"/leetcode/solutions/tags/binary-search"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651083960,formattedLastUpdatedAt:"4/27/2022",frontMatter:{title:"702. Search in a Sorted Array of Unknown Size (Medium)",tags:["Array","Binary Search","Medium"]},sidebar:"solutions",previous:{title:"658. Find K Closest Elements (Medium)",permalink:"/leetcode/solutions/658"},next:{title:"739. Daily Temperatures (Medium)",permalink:"/leetcode/solutions/739"}},m={},c=[],p={toc:c};function h(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(l.Z,{solutionType:"medium",labels:["Array","Hash Table"],url:"https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size/",mdxType:"SolutionDocHead"}),(0,i.kt)("p",null,"Given an integer array sorted in ascending order, write a function to search target in nums. If ",(0,i.kt)("inlineCode",{parentName:"p"},"target")," exists, then return its index, otherwise return ",(0,i.kt)("inlineCode",{parentName:"p"},"-1"),". ",(0,i.kt)("b",null,"However, the array size is unknown to you"),". You may only access the array using an ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayReader")," interface, where ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayReader.get(k)")," returns the element of the array at index ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," (0-indexed)."),(0,i.kt)("p",null,"You may assume all integers in the array are less than ",(0,i.kt)("inlineCode",{parentName:"p"},"10000"),", and if you access the array out of bounds,",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayReader.get")," will return ",(0,i.kt)("inlineCode",{parentName:"p"},"2147483647"),"."),(0,i.kt)("b",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input:\narray\n = [-1,0,3,5,9,12],\ntarget\n = 9\n\nOutput:\n 4\n\nExplanation:\n 9 exists in\nnums\n and its index is 4\n")),(0,i.kt)("b",null,"Example 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input:\narray\n = [-1,0,3,5,9,12],\ntarget\n = 2\n\nOutput:\n -1\n\nExplanation:\n 2 does not exist in\nnums\n so return -1\n")),(0,i.kt)("b",null,"Note:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You may assume that all elements in the array are unique."),(0,i.kt)("li",{parentName:"ul"},"The value of each element in the array will be in the range ",(0,i.kt)("inlineCode",{parentName:"li"},"[-9999, 9999]"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"solution.js","solution.js":!0},"function binarySearch(arr, l, r, x) {\n  if (r >= l) {\n    let mid = l + Math.floor((r - l) / 2);\n    if (arr[mid] == x) return mid;\n    if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x);\n    return binarySearch(arr, mid + 1, r, x);\n  }\n  return -1;\n}\n\n// function takes an infinite size array and a key to be\n// searched and returns its position if found else -1.\n// We don't know size of arr[] and we can assume size to be\n// infinite in this function.\n// NOTE THAT THIS FUNCTION ASSUMES arr[] TO BE OF INFINITE SIZE\n// THEREFORE, THERE IS NO INDEX OUT OF BOUND CHECKING\nfunction findPos(arr, key) {\n  let l = 0,\n    h = 1;\n  let val = arr[0];\n\n  // Find h to do binary search\n  while (val < key) {\n    l = h; // store previous high\n    h = 2 * h; // double high index\n    val = arr[h]; // update new val\n  }\n\n  // at this point we have updated low and\n  // high indices, Thus use binary search\n  // between them\n  return binarySearch(arr, l, h, key);\n}\n")))}h.isMDXComponent=!0}}]);