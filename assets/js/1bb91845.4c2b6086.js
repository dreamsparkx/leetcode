"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[2509],{2528:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var a=n(7462),s=n(3366),l=(n(7294),n(3905)),i=n(5714),r=["components"],o={title:"32. Longest Valid Parentheses (Hard)",tags:["String","Dynamic Programming","Stack"]},u=void 0,p={unversionedId:"32",id:"32",title:"32. Longest Valid Parentheses (Hard)",description:"<SolutionDocHead",source:"@site/solutions/32.mdx",sourceDirName:".",slug:"/32",permalink:"/leetcode/solutions/32",tags:[{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Dynamic Programming",permalink:"/leetcode/solutions/tags/dynamic-programming"},{label:"Stack",permalink:"/leetcode/solutions/tags/stack"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650892857,formattedLastUpdatedAt:"4/25/2022",frontMatter:{title:"32. Longest Valid Parentheses (Hard)",tags:["String","Dynamic Programming","Stack"]},sidebar:"solutions",previous:{title:"30. Substring with Concatenation of All Words (Hard)",permalink:"/leetcode/solutions/30"},next:{title:"35. Search Insert Position (Easy)",permalink:"/leetcode/solutions/35"}},c={},d=[],m={toc:d};function g(t){var e=t.components,n=(0,s.Z)(t,r);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)(i.Z,{solutionType:"hard",labels:["String","Dynamic Programming","Stack"],url:"https://leetcode.com/problems/longest-valid-parentheses/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"Given a string containing just the characters ",(0,l.kt)("inlineCode",{parentName:"p"},"'('")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"')'"),", find the length of the longest valid (well-formed) parentheses substring."),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: s = "(()"\nOutput: 2\nExplanation: The longest valid parentheses substring is "()".\n')),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: s = ")()())"\nOutput: 4\nExplanation: The longest valid parentheses substring is "()()".\n')),(0,l.kt)("b",null,"Example 3:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Input: s = ""\nOutput: 0\n')),(0,l.kt)("b",null,"Constraints:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"0 <= s.length <= 3 ","*"," 10",(0,l.kt)("sup",null,"4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"s[i] is '(', or ')'"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},'function longestValidParentheses(s: string): number {\n  let stack: number[] = [-1],\n    ans: number = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === "(") {\n      stack.push(i);\n    } else if (stack.length === 1) {\n      stack[0] = i;\n    } else {\n      stack.pop();\n      ans = Math.max(ans, i - stack[stack.length - 1]);\n    }\n  }\n  return ans;\n}\n')))}g.isMDXComponent=!0}}]);