"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[542],{6529:function(e,t,n){var r=n(7294),a=n(1285),l=(0,n(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));t.Z=function(e){var t=l(),n=e.labels;return r.createElement("div",{className:t.root},n.map((function(e,t){return r.createElement(a.Z,{label:e,key:t+"-"+e})})))}},5714:function(e,t,n){n.d(t,{Z:function(){return o}});var r=n(7294),a={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},l=function(e){var t=e.type,n="";switch(t){case"medium":n="Medium";break;case"hard":n="Hard";break;default:n="Easy"}return r.createElement("span",{className:a[t]},n)},i=n(6529),o=function(e){var t=e.solutionType,n=e.labels,a=e.companies,o=e.url;return r.createElement(r.Fragment,null,r.createElement(l,{type:t}),r.createElement("br",null),r.createElement("br",null),r.createElement(i.Z,{labels:n}),r.createElement("br",null),a&&a.length>0&&r.createElement(r.Fragment,null,"Companies:",r.createElement(i.Z,{labels:a}),r.createElement("br",null)),"URL: ",r.createElement("a",{href:o,target:"_blank",rel:"noopener noreferrer"},o),r.createElement("br",null),r.createElement("br",null))}},2314:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return p}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=n(5714),o=["components"],s={title:"11. Container With Most Water (Medium)",tags:["Array","Two Pointers","Greedy"]},u=void 0,m={unversionedId:"11",id:"11",title:"11. Container With Most Water (Medium)",description:"<SolutionDocHead",source:"@site/solutions/11.mdx",sourceDirName:".",slug:"/11",permalink:"/solutions/11",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Two Pointers",permalink:"/solutions/tags/two-pointers"},{label:"Greedy",permalink:"/solutions/tags/greedy"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650482437,formattedLastUpdatedAt:"4/21/2022",frontMatter:{title:"11. Container With Most Water (Medium)",tags:["Array","Two Pointers","Greedy"]},sidebar:"solutions",previous:{title:"6. Zigzag Conversion (Medium)",permalink:"/solutions/6"},next:{title:"15. 3Sum (Medium)",permalink:"/solutions/15"}},c={},p=[],h={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(i.Z,{solutionType:"medium",labels:["Array","Two Pointers","Greedy"],companies:["Bloomberg"],url:"https://leetcode.com/problems/container-with-most-water/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"You are given an integer array ",(0,l.kt)("inlineCode",{parentName:"p"},"height")," of length ",(0,l.kt)("inlineCode",{parentName:"p"},"n"),". There are ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," vertical lines drawn such that the two endpoints of the ",(0,l.kt)("inlineCode",{parentName:"p"},"ith")," line are ",(0,l.kt)("inlineCode",{parentName:"p"},"(i, 0)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"(i, height[i])"),"."),(0,l.kt)("p",null,"Find two lines that together with the x-axis form a container, such that the container contains the most water."),(0,l.kt)("p",null,"Return the maximum amount of water a container can store."),(0,l.kt)("b",null,"Notice")," that you may not slant the container.",(0,l.kt)("br",null),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("br",null),(0,l.kt)("img",{src:"/img/solutions/11/image.png",width:"483",height:"342"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n")),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: height = [1,1]\nOutput: 1\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function maxArea(height: number[]): number {\n  let result = 0,\n    left = 0,\n    right = height.length - 1;\n  while (left < right) {\n    let smallestSide = Math.min(height[left], height[right]);\n    let area = (right - left) * smallestSide;\n    if (area > result) {\n      result = area;\n    }\n    if (height[left] < height[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n  return result;\n}\n")))}d.isMDXComponent=!0}}]);