"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[2995],{5705:function(t,e,n){n.r(e),n.d(e,{assets:function(){return m},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var a=n(7462),u=n(3366),r=(n(7294),n(3905)),s=n(5714),l=["components"],o={title:"1. Two Sum (Easy)",tags:["Array","Hash Table","Easy"]},i=void 0,p={unversionedId:"1",id:"1",title:"1. Two Sum (Easy)",description:"<SolutionDocHead",source:"@site/solutions/1.mdx",sourceDirName:".",slug:"/1",permalink:"/leetcode/solutions/1",tags:[{label:"Array",permalink:"/leetcode/solutions/tags/array"},{label:"Hash Table",permalink:"/leetcode/solutions/tags/hash-table"},{label:"Easy",permalink:"/leetcode/solutions/tags/easy"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650915156,formattedLastUpdatedAt:"4/26/2022",frontMatter:{title:"1. Two Sum (Easy)",tags:["Array","Hash Table","Easy"]},sidebar:"solutions",previous:{title:"Intro",permalink:"/leetcode/solutions/"},next:{title:"2. Add Two Numbers (Medium)",permalink:"/leetcode/solutions/2"}},m={},c=[],d={toc:c};function h(t){var e=t.components,n=(0,u.Z)(t,l);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{solutionType:"easy",labels:["Array","Hash Table"],url:"https://leetcode.com/problems/two-sum/",mdxType:"SolutionDocHead"}),(0,r.kt)("p",null,"Given an array of integers ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", return indices of the two numbers such that they add up to ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"."),(0,r.kt)("p",null,"You may assume that each input would have ",(0,r.kt)("b",null,"exactly one solution"),", and you may not use the same element twice."),(0,r.kt)("p",null,"You can return the answer in any order."),(0,r.kt)("b",null,"Example 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n")),(0,r.kt)("b",null,"Example 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n")),(0,r.kt)("b",null,"Example 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [3,3], target = 6\nOutput: [0,1]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function twoSum(nums: number[], target: number): number[] {\n  const result: number[] = [];\n  const hashMap = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const find = target - num;\n    if (hashMap.hasOwnProperty(find)) {\n      result.push(i);\n      result.push(hashMap[find]);\n      break;\n    } else {\n      hashMap[num] = i;\n    }\n  }\n  return result;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"title=solution.java",title:"solution.java"},"public class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[] result = new int[2];\n\n        HashMap<Integer, Integer> index = new HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.length; i ++) {\n            if (index.containsKey(target - nums[i])) {\n                result[0] = index.get(target - nums[i]);\n                result[1] = i;\n                return result;\n            }\n            index.put(nums[i], i);\n        }\n        return result;\n    }\n}\n")))}h.isMDXComponent=!0}}]);