"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[6104],{7874:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),o=n(5714),i=["components"],l={title:"482. License Key Formatting (Easy)",tags:["String","Easy","Google"]},u=void 0,p={unversionedId:"482",id:"482",title:"482. License Key Formatting (Easy)",description:"<SolutionDocHead",source:"@site/solutions/482.mdx",sourceDirName:".",slug:"/482",permalink:"/leetcode/solutions/482",tags:[{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Easy",permalink:"/leetcode/solutions/tags/easy"},{label:"Google",permalink:"/leetcode/solutions/tags/google"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651240850,formattedLastUpdatedAt:"4/29/2022",frontMatter:{title:"482. License Key Formatting (Easy)",tags:["String","Easy","Google"]},sidebar:"solutions",previous:{title:"463. Island Perimeter (Easy)",permalink:"/leetcode/solutions/463"},next:{title:"535. Encode and Decode TinyURL (Medium)",permalink:"/leetcode/solutions/535"}},c={},d=[],m={toc:d};function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(o.Z,{solutionType:"easy",labels:["String","Math","Recursion"],companies:["Google"],url:"https://leetcode.com/problems/license-key-formatting/",mdxType:"SolutionDocHead"}),(0,s.kt)("p",null,"You are given a license key represented as a string ",(0,s.kt)("inlineCode",{parentName:"p"},"s")," that consists of only alphanumeric characters and dashes. The string is separated into ",(0,s.kt)("inlineCode",{parentName:"p"},"n + 1")," groups by ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," dashes. You are also given an integer ",(0,s.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,s.kt)("p",null,"We want to reformat the string ",(0,s.kt)("inlineCode",{parentName:"p"},"s")," such that each group contains exactly ",(0,s.kt)("inlineCode",{parentName:"p"},"k")," characters, except for the first group, which could be shorter than ",(0,s.kt)("inlineCode",{parentName:"p"},"k")," but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase."),(0,s.kt)("p",null,"Return the reformatted license key."),(0,s.kt)("b",null,"Example 1:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: s = "5F3Z-2e-9-w", k = 4\nOutput: "5F3Z-2E9W"\nExplanation: The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed.\n')),(0,s.kt)("b",null,"Example 2:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: s = "2-5g-3-J", k = 2\nOutput: "2-5G-3J"\nExplanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n')),(0,s.kt)("b",null,"Constraints:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"1 <= s.length <= 10",(0,s.kt)("sup",null,"5")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"s")," consists of English letters, digits, and dashes ",(0,s.kt)("inlineCode",{parentName:"li"},"'-'"),"."),(0,s.kt)("li",{parentName:"ul"},"1 <= k <= 10",(0,s.kt)("sup",null,"4"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},'function licenseKeyFormatting(s: string, k: number): string {\n  const newStr = s.replace(/-/g, "").toUpperCase(); // Remove existing dashes and convert any lowercase letters to uppercase\n  const arr = newStr.split(""); // Convert string to an array so we can manipulate it\n  for (let i = arr.length - 1 - k; i >= 0; i -= k) {\n    // Loop through array backwards and decrement by value of K\n    arr[i] = arr[i] + "-";\n  }\n  return arr.join("");\n}\n')))}k.isMDXComponent=!0}}]);