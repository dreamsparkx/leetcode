"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[7611],{6529:function(e,n,t){var a=t(7294),r=t(1285),l=(0,t(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));n.Z=function(e){var n=l(),t=e.labels;return a.createElement("div",{className:n.root},t.map((function(e,n){return a.createElement(r.Z,{label:e,key:n+"-"+e})})))}},5714:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(7294),r={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},l=function(e){var n=e.type,t="";switch(n){case"medium":t="Medium";break;case"hard":t="Hard";break;default:t="Easy"}return a.createElement("span",{className:r[n]},t)},i=t(6529),o=function(e){var n=e.solutionType,t=e.labels,r=e.companies,o=e.url;return a.createElement(a.Fragment,null,a.createElement(l,{type:n}),a.createElement("br",null),a.createElement("br",null),a.createElement(i.Z,{labels:t}),a.createElement("br",null),r&&r.length>0&&a.createElement(a.Fragment,null,"Companies:",a.createElement(i.Z,{labels:r}),a.createElement("br",null)),"URL: ",a.createElement("a",{href:o,target:"_blank",rel:"noopener noreferrer"},o),a.createElement("br",null),a.createElement("br",null))}},4836:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var a=t(7462),r=t(3366),l=(t(7294),t(3905)),i=t(5714),o=["components"],s={title:"278. First Bad Version (Easy)",tags:["Binary Search","Interactive","Easy"]},u=void 0,c={unversionedId:"278",id:"278",title:"278. First Bad Version (Easy)",description:"<SolutionDocHead",source:"@site/solutions/278.mdx",sourceDirName:".",slug:"/278",permalink:"/leetcode/solutions/278",tags:[{label:"Binary Search",permalink:"/leetcode/solutions/tags/binary-search"},{label:"Interactive",permalink:"/leetcode/solutions/tags/interactive"},{label:"Easy",permalink:"/leetcode/solutions/tags/easy"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651072671,formattedLastUpdatedAt:"4/27/2022",frontMatter:{title:"278. First Bad Version (Easy)",tags:["Binary Search","Interactive","Easy"]},sidebar:"solutions",previous:{title:"270. Closest Binary Search Tree Value (Medium)",permalink:"/leetcode/solutions/270"},next:{title:"295. Find Median from Data Stream (Hard)",permalink:"/leetcode/solutions/295"}},d={},m=[],p={toc:m};function f(e){var n=e.components,t=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(i.Z,{solutionType:"easy",labels:["Binary Search","Interactive"],url:"https://leetcode.com/problems/first-bad-version/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad."),(0,l.kt)("p",null,"Suppose you have n versions ",(0,l.kt)("inlineCode",{parentName:"p"},"[1, 2, ..., n]")," and you want to find out the first bad one, which causes all the following ones to be bad."),(0,l.kt)("p",null,"You are given an API ",(0,l.kt)("inlineCode",{parentName:"p"},"bool isBadVersion(version)")," which returns whether ",(0,l.kt)("inlineCode",{parentName:"p"},"version")," is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API."),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.\n")),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: n = 1, bad = 1\nOutput: 1\n")),(0,l.kt)("b",null,"Constraints:"),(0,l.kt)("p",null,"1 <= bad <= n <= 2",(0,l.kt)("sup",null,"31")," - 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"/**\n * The knows API is defined in the parent class Relation.\n * isBadVersion(version: number): boolean {\n *     ...\n * };\n */\n\nvar solution = function (isBadVersion: any) {\n  return function (n: number): number {\n    let left = 1,\n      right = n;\n    while (right > left) {\n      const mid = left + Math.floor((right - left) / 2);\n      if (isBadVersion(mid)) {\n        right = mid;\n      } else {\n        left = mid + 1;\n      }\n    }\n    return left;\n  };\n};\n")))}f.isMDXComponent=!0}}]);