"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[9093],{8060:function(t,e,n){n.r(e),n.d(e,{assets:function(){return m},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),o=n(5714),l=["components"],i={title:"49. Group Anagrams (Medium)",tags:["Hash Table","String","Sorting","Medium","Amazon","Facebook","Bloomberg","Uber"]},u=void 0,p={unversionedId:"49",id:"49",title:"49. Group Anagrams (Medium)",description:"<SolutionDocHead",source:"@site/solutions/49.mdx",sourceDirName:".",slug:"/49",permalink:"/leetcode/solutions/49",tags:[{label:"Hash Table",permalink:"/leetcode/solutions/tags/hash-table"},{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Sorting",permalink:"/leetcode/solutions/tags/sorting"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"},{label:"Amazon",permalink:"/leetcode/solutions/tags/amazon"},{label:"Facebook",permalink:"/leetcode/solutions/tags/facebook"},{label:"Bloomberg",permalink:"/leetcode/solutions/tags/bloomberg"},{label:"Uber",permalink:"/leetcode/solutions/tags/uber"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651240850,formattedLastUpdatedAt:"4/29/2022",frontMatter:{title:"49. Group Anagrams (Medium)",tags:["Hash Table","String","Sorting","Medium","Amazon","Facebook","Bloomberg","Uber"]},sidebar:"solutions",previous:{title:"42. Trapping Rain Water (Hard)",permalink:"/leetcode/solutions/42"},next:{title:"53. Maximum Subarray (Easy)",permalink:"/leetcode/solutions/53"}},m={},c=[],g={toc:c};function d(t){var e=t.components,n=(0,a.Z)(t,l);return(0,s.kt)("wrapper",(0,r.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)(o.Z,{solutionType:"medium",labels:["Hash Table","String","Sorting"],companies:["Amazon","Facebook","Bloomberg","Uber"],url:"https://leetcode.com/problems/group-anagrams/",mdxType:"SolutionDocHead"}),(0,s.kt)("p",null,"Given an array of strings ",(0,s.kt)("inlineCode",{parentName:"p"},"strs"),", group ",(0,s.kt)("b",null,"the anagrams")," together. You can return the answer in ",(0,s.kt)("b",null,"any order"),"."),(0,s.kt)("p",null,"An ",(0,s.kt)("b",null,"Anagram")," is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,s.kt)("b",null,"Example 1:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: strs = ["eat","tea","tan","ate","nat","bat"]\nOutput: [["bat"],["nat","tan"],["ate","eat","tea"]]\n')),(0,s.kt)("b",null,"Example 2:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: strs = [""]\nOutput: [[""]]\n')),(0,s.kt)("b",null,"Example 3:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: strs = ["a"]\nOutput: [["a"]]\n')),(0,s.kt)("b",null,"Constraints:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"1 <= strs.length <= 10",(0,s.kt)("sup",null,"4")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"0 <= strs[i].length <= 100")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"strs[i]")," consists of lowercase English letters.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},'function groupAnagrams(strs: string[]): string[][] {\n  const map = new Map();\n  for (const str of strs) {\n    let letters = str.split("").sort().join("");\n    if (map.has(letters)) {\n      map.get(letters).push(str);\n    } else {\n      map.set(letters, [str]);\n    }\n  }\n  return Array.from(map.values());\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution2.ts",title:"solution2.ts"},'function groupAnagrams(strs: string[]): string[][] {\n  let res = {};\n  for (const str of strs) {\n    let count = new Array(26).fill(0);\n    for (const char of str) {\n      count[char.charCodeAt(0) - 97]++;\n    }\n    let key = count.join("#");\n    if (res.hasOwnProperty(key)) {\n      res[key].push(str);\n    } else {\n      res[key] = [str];\n    }\n  }\n  return Object.values(res);\n}\n')))}d.isMDXComponent=!0}}]);