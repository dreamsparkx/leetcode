"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[553],{1541:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=n(5714),i=["components"],s={title:"270. Closest Binary Search Tree Value (Medium)",tags:["Binary Search","Divide and Conquer","Medium"]},u=void 0,d={unversionedId:"270",id:"270",title:"270. Closest Binary Search Tree Value (Medium)",description:"<SolutionDocHead",source:"@site/solutions/270.mdx",sourceDirName:".",slug:"/270",permalink:"/leetcode/solutions/270",tags:[{label:"Binary Search",permalink:"/leetcode/solutions/tags/binary-search"},{label:"Divide and Conquer",permalink:"/leetcode/solutions/tags/divide-and-conquer"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651084499,formattedLastUpdatedAt:"4/28/2022",frontMatter:{title:"270. Closest Binary Search Tree Value (Medium)",tags:["Binary Search","Divide and Conquer","Medium"]},sidebar:"solutions",previous:{title:"242. Valid Anagram (Easy)",permalink:"/leetcode/solutions/242"},next:{title:"278. First Bad Version (Easy)",permalink:"/leetcode/solutions/278"}},c={},p=[],m={toc:p};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(l.Z,{solutionType:"medium",labels:["Binary Search","Divide and Conquer"],companies:["Snapchat","Microsoft","Google"],url:"https://leetcode.com/problems/closest-binary-search-tree-value/",mdxType:"SolutionDocHead"}),(0,o.kt)("p",null,"Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Given target value is a floating point."),(0,o.kt)("li",{parentName:"ul"},"You are guaranteed to have only one unique value in the BST that is closest to the target.")),(0,o.kt)("b",null,"Example 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = {5,4,9,2,#,8,10} and target = 6.124780\nOutput: 5\nExplanation\uff1a\nBinary tree {5,4,9,2,#,8,10},  denote the following structure:\n        5\n       / \\\n     4    9\n    /    / \\\n   2    8  10\n")),(0,o.kt)("b",null,"Example 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = {3,2,4,1} and target = 4.142857\nOutput: 4\nExplanation\uff1a\nBinary tree {3,2,4,1},  denote the following structure:\n     3\n    / \\\n  2    4\n /\n1\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"class TreeNode {\n  val: number;\n  left: TreeNode;\n  right: TreeNode;\n  constructor(val: number) {\n    this.val = val;\n    this.left = this.right = null;\n  }\n}\n\nconst findClosestValueInBst = (tree: TreeNode, target) => {\n  let currentNode = tree;\n  let closest = Infinity;\n  while (currentNode !== null) {\n    if (Math.abs(target - currentNode.val) < Math.abs(target - closest)) {\n      closest = currentNode.val;\n    }\n    if (currentNode.val > target) {\n      currentNode = currentNode.left;\n    } else {\n      currentNode = currentNode.right;\n    }\n  }\n  return closest;\n};\n")))}h.isMDXComponent=!0}}]);