"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[8901],{6529:function(e,t,n){var l=n(7294),a=n(1285),r=(0,n(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));t.Z=function(e){var t=r(),n=e.labels;return l.createElement("div",{className:t.root},n.map((function(e,t){return l.createElement(a.Z,{label:e,key:t+"-"+e})})))}},5714:function(e,t,n){n.d(t,{Z:function(){return s}});var l=n(7294),a={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},r=function(e){var t=e.type,n="";switch(t){case"medium":n="Medium";break;case"hard":n="Hard";break;default:n="Easy"}return l.createElement("span",{className:a[t]},n)},o=n(6529),s=function(e){var t=e.solutionType,n=e.labels,a=e.companies,s=e.url;return l.createElement(l.Fragment,null,l.createElement(r,{type:t}),l.createElement("br",null),l.createElement("br",null),l.createElement(o.Z,{labels:n}),l.createElement("br",null),a&&a.length>0&&l.createElement(l.Fragment,null,"Companies:",l.createElement(o.Z,{labels:a}),l.createElement("br",null)),"URL: ",l.createElement("a",{href:s,target:"_blank",rel:"noopener noreferrer"},s),l.createElement("br",null),l.createElement("br",null))}},5448:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var l=n(7462),a=n(3366),r=(n(7294),n(3905)),o=n(5714),s=["components"],i={title:"316. Remove Duplicate Letters (Medium)",tags:["String","Stack","Greedy","Monotonic Stack","Medium","Google"]},c=void 0,u={unversionedId:"316",id:"316",title:"316. Remove Duplicate Letters (Medium)",description:"<SolutionDocHead",source:"@site/solutions/316.mdx",sourceDirName:".",slug:"/316",permalink:"/leetcode/solutions/316",tags:[{label:"String",permalink:"/leetcode/solutions/tags/string"},{label:"Stack",permalink:"/leetcode/solutions/tags/stack"},{label:"Greedy",permalink:"/leetcode/solutions/tags/greedy"},{label:"Monotonic Stack",permalink:"/leetcode/solutions/tags/monotonic-stack"},{label:"Medium",permalink:"/leetcode/solutions/tags/medium"},{label:"Google",permalink:"/leetcode/solutions/tags/google"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1651240850,formattedLastUpdatedAt:"4/29/2022",frontMatter:{title:"316. Remove Duplicate Letters (Medium)",tags:["String","Stack","Greedy","Monotonic Stack","Medium","Google"]},sidebar:"solutions",previous:{title:"295. Find Median from Data Stream (Hard)",permalink:"/leetcode/solutions/295"},next:{title:"344. Reverse String (Easy)",permalink:"/leetcode/solutions/344"}},m={},p=[],d={toc:p};function k(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{solutionType:"medium",labels:["String","Stack","Greedy","Monotonic Stack"],companies:["Google"],url:"https://leetcode.com/problems/remove-duplicate-letters/",mdxType:"SolutionDocHead"}),(0,r.kt)("p",null,"Given a string ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),", remove duplicate letters so that every letter appears once and only once. You must make sure your result is ",(0,r.kt)("b",null,"the smallest in lexicographical order")," among all possible results."),(0,r.kt)("b",null,"Example 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "bcabc"\nOutput: "abc"\n')),(0,r.kt)("b",null,"Example 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "cbacdcbc"\nOutput: "acdb"\n')),(0,r.kt)("b",null,"Constraints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1 <= s.length <= 10",(0,r.kt)("sup",null,"4")),(0,r.kt)("li",{parentName:"ul"},"s consists of lowercase English letters.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},'function removeDuplicateLetters(s: string): string {\n  let stack: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    // if s[i] already appears in stack, jump to next loop\n    if (stack.indexOf(char) > -1) {\n      continue;\n    }\n    while (\n      stack.length > 0 &&\n      stack[stack.length - 1] > char &&\n      s.indexOf(stack[stack.length - 1], i) > i\n    ) {\n      stack.pop();\n    }\n    stack.push(char);\n  }\n  return stack.join("");\n}\n')))}k.isMDXComponent=!0}}]);