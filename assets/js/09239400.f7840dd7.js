"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[7005],{6529:function(e,n,t){var r=t(7294),a=t(1285),l=(0,t(1120).Z)((function(e){return{root:{display:"flex",flexWrap:"wrap","& > *":{margin:e.spacing(.5)}}}}));n.Z=function(e){var n=l(),t=e.labels;return r.createElement("div",{className:n.root},t.map((function(e,n){return r.createElement(a.Z,{label:e,key:n+"-"+e})})))}},5714:function(e,n,t){t.d(n,{Z:function(){return o}});var r=t(7294),a={medium:"medium_AtL5",easy:"easy_Arst",hard:"hard_vnPO"},l=function(e){var n=e.type,t="";switch(n){case"medium":t="Medium";break;case"hard":t="Hard";break;default:t="Easy"}return r.createElement("span",{className:a[n]},t)},i=t(6529),o=function(e){var n=e.solutionType,t=e.labels,a=e.companies,o=e.url;return r.createElement(r.Fragment,null,r.createElement(l,{type:n}),r.createElement("br",null),r.createElement("br",null),r.createElement(i.Z,{labels:t}),r.createElement("br",null),a&&a.length>0&&r.createElement(r.Fragment,null,"Companies:",r.createElement(i.Z,{labels:a}),r.createElement("br",null)),"URL: ",r.createElement("a",{href:o,target:"_blank",rel:"noopener noreferrer"},o),r.createElement("br",null),r.createElement("br",null))}},5036:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var r=t(7462),a=t(3366),l=(t(7294),t(3905)),i=t(5714),o=["components"],s={title:"4. Median of Two Sorted Arrays (Hard)",tags:["Array","Binary Search","Divide and Conquer","Hard"]},u=void 0,d={unversionedId:"4",id:"4",title:"4. Median of Two Sorted Arrays (Hard)",description:"<SolutionDocHead",source:"@site/solutions/4.mdx",sourceDirName:".",slug:"/4",permalink:"/leetcode/solutions/4",tags:[{label:"Array",permalink:"/leetcode/solutions/tags/array"},{label:"Binary Search",permalink:"/leetcode/solutions/tags/binary-search"},{label:"Divide and Conquer",permalink:"/leetcode/solutions/tags/divide-and-conquer"},{label:"Hard",permalink:"/leetcode/solutions/tags/hard"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650999437,formattedLastUpdatedAt:"4/27/2022",frontMatter:{title:"4. Median of Two Sorted Arrays (Hard)",tags:["Array","Binary Search","Divide and Conquer","Hard"]},sidebar:"solutions",previous:{title:"3. Longest Substring Without Repeating Characters (Medium)",permalink:"/leetcode/solutions/3"},next:{title:"5. Longest Palindromic Substring (Medium)",permalink:"/leetcode/solutions/5"}},m={},c=[],p={toc:c};function f(e){var n=e.components,t=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(i.Z,{solutionType:"hard",labels:["Array","Binary Search","Divide and Conquer"],url:"https://leetcode.com/problems/median-of-two-sorted-arrays/",mdxType:"SolutionDocHead"}),(0,l.kt)("p",null,"Given two sorted arrays ",(0,l.kt)("inlineCode",{parentName:"p"},"nums1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"nums2")," of size ",(0,l.kt)("inlineCode",{parentName:"p"},"m")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," respectively, return ",(0,l.kt)("b",null,"the median")," of the two sorted arrays."),(0,l.kt)("p",null,"The overall run time complexity should be ",(0,l.kt)("inlineCode",{parentName:"p"},"O(log (m+n))"),"."),(0,l.kt)("b",null,"Example 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n")),(0,l.kt)("b",null,"Example 2:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function findMedianSortedArrays(ar1: number[], ar2: number[]): number {\n  let length = ar1.length + ar2.length;\n  let index1 = 0,\n    index2 = 0;\n  let elements = [];\n  while (elements.length <= length / 2) {\n    if (\n      (ar1[index1] !== undefined && ar1[index1] < ar2[index2]) ||\n      ar2[index2] === undefined\n    ) {\n      elements.push(ar1[index1]);\n      index1++;\n    } else {\n      elements.push(ar2[index2]);\n      index2++;\n    }\n  }\n  if ((length % 2 === 0 || length === 2) && elements.length >= 2) {\n    return (elements[elements.length - 2] + elements[elements.length - 1]) / 2;\n  } else {\n    return elements[elements.length - 1];\n  }\n}\n")))}f.isMDXComponent=!0}}]);