"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[146],{4673:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return m}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=n.p+"assets/images/image-4954fe6485556154dff47ca655e7e8d6.png",l=n(5714),s=["components"],c={title:"42. Trapping Rain Water (Hard)",tags:["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack","Hard"]},p=void 0,u={unversionedId:"42",id:"42",title:"42. Trapping Rain Water (Hard)",description:"<SolutionDocHead",source:"@site/solutions/42.mdx",sourceDirName:".",slug:"/42",permalink:"/leetcode/solutions/42",tags:[{label:"Array",permalink:"/leetcode/solutions/tags/array"},{label:"Two Pointers",permalink:"/leetcode/solutions/tags/two-pointers"},{label:"Dynamic Programming",permalink:"/leetcode/solutions/tags/dynamic-programming"},{label:"Stack",permalink:"/leetcode/solutions/tags/stack"},{label:"Monotonic Stack",permalink:"/leetcode/solutions/tags/monotonic-stack"},{label:"Hard",permalink:"/leetcode/solutions/tags/hard"}],version:"current",lastUpdatedBy:"Gaurav Bharti",lastUpdatedAt:1650915156,formattedLastUpdatedAt:"4/26/2022",frontMatter:{title:"42. Trapping Rain Water (Hard)",tags:["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack","Hard"]},sidebar:"solutions",previous:{title:"37. Sudoku Solver (Hard)",permalink:"/leetcode/solutions/37"},next:{title:"49. Group Anagrams (Medium)",permalink:"/leetcode/solutions/49"}},h={},m=[],g={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{solutionType:"hard",labels:["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack"],companies:["Apple","Twitter","Airbnb","Amazon","Zenefits","Bloomberg","Google"],url:"https://leetcode.com/problems/trapping-rain-water/",mdxType:"SolutionDocHead"}),(0,r.kt)("p",null,"Given ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," non-negative integers representing an elevation map where the width of each bar is ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", compute how much water it can trap after raining."),(0,r.kt)("b",null,"Example 1:"),(0,r.kt)("br",null),(0,r.kt)("img",{src:o,width:"483",height:"342"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n")),(0,r.kt)("b",null,"Example 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: height = [4,2,0,3,2,5]\nOutput: 9\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=solution.ts",title:"solution.ts"},"function trap(height: number[]): number {\n  const size = height.length;\n  const leftMax = new Array(size);\n  const rightMax = new Array(size);\n  let water = 0;\n\n  leftMax[0] = height[0];\n  rightMax[size - 1] = height[size - 1];\n\n  // find the height of left wall for each elevation\n  for (let i = 1; i < size; i++) {\n    leftMax[i] = Math.max(height[i], leftMax[i - 1]);\n  }\n  // find the height of right wall for each elevation\n  for (let i = size - 2; i >= 0; i--) {\n    rightMax[i] = Math.max(height[i], rightMax[i + 1]);\n  }\n  // the height of the water for each elevation would be the\n  // the height of the shorter wal minus the elevation height\n  for (let i = 1; i < size - 1; i++) {\n    water += Math.min(leftMax[i], rightMax[i]) - height[i];\n  }\n\n  return water;\n}\n")))}d.isMDXComponent=!0}}]);